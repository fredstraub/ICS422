install.packages('swirl')
install.packages('igraph')
install.packages('tidyverse')
install.packages('poweRlaw')
install.packages('linkcomm')
install.packages('statnet')
library('igraph')
update.packages()
library(igraph)
g = Graph()
g = Graph()
g
? graph
?make_directed_graph
g <= make_directed_graph([1,2], [2,1], [1,3],[3,1],[1,4],[2,4],[4,3])
g = make_directed_graph([1,2], [2,1], [1,3],[3,1],[1,4],[2,4],[4,3])
make_directed_graph(g([1,2], [2,1], [1,3],[3,1],[1,4],[2,4],[4,3]))
g <- make_directed_graph((1,2))
make_directed_graph(g(1,2))
make_directed_graph((1,2))
directed_graph(1,2)
g <= directed_graph(1,2)
plot(dg)
dg<-graph.formula(Tom-+Mary, Tom-+Bill, Tom-+Sam, Sue+-Mary, Bill-+Sue)
dg<-graph.formula(Tom-+Mary, Tom-+Bill, Tom-+Sam, Sue+-Mary, Bill-+Sue)
plot(dg)
g<-graph.formula(v1++v2, v1++v3, v1-+v4, v2-+v4, v3-+v4)
plot(g)
g5<-graph.formula(v1++v2, v1++v3, v1-+v4, v2-+v4, v4-+v3)
plot(g5)
?page.rank
page_rank(g5, damping = 1)
page_rank(g5, damping = 1)$vector
page_rank(g5)$vector
page_rank(g5, damping = 1)$vector
page_rank(g5, damping = 0)$vector
page_rank(g5, damping = 0)$vector
page_rank(g5, damping = 0.85)$vector
page_rank(g5, damping = 0.85)$vector
page_rank(g5, damping = 0)$vector
page_rank(g5, damping = 1)$vector
page_rank(g5, damping = 0.85)$vector
page_rank(g5, damping = 0)$vector
eigen_centrality(g5)
eigen_centrality(g5)$vector
plot(g5)
g5<-graph.formula(v1++v2, v1++v3, v1-+v4, v2-+v4, v4-+v3)
page_rank(g5, damping = 1)$vector
page_rank(g5, damping = 0.85)$vector
page_rank(g5, damping = 0)$vector
eigen_centrality(g5)$vector
?eigen_centrality
eigen_centrality(g5, scale = 1)$vector
eigen_centrality(g5, scale = TRUE)$vector
eigen_centrality(g5, scale = FALSE)$vector
page_rank(g5, damping = 0)$vector
eigen_centrality(g5, scale = FALSE)$vector
eigen_centrality(g5, weights = 1)$vector
eigen_centrality(g5, scale = TRUE)$vector
eigen_centrality(g5, scale = FALSE)$vector
eigen_centrality(g5, scale = SUM TO 1)$vector
eigen_centrality(g5, scale = 1)$vector
eigen_centrality(g5, scale = 0.25)$vector
eigen_centrality(g5, scale = FALSE)$vector
g5<-graph.formula(v1++v2, v1++v3, v1-+v4, v2-+v4, v4-+v3)
page_rank(g5, damping = 1)$vector
page_rank(g5, damping = 0.85)$vector
page_rank(g5, damping = 0)$vector
eigen_centrality(g5, scale = FALSE)$vector
eigen_centrality(g5, directed = TRUE, scale = FALSE)$vector
eigen_centrality(g5, directed = TRUE, scale = TRUE)$vector
eigen_centrality(g5, directed = TRUE, scale = FALSE)$vector
page_rank(g5, directed = TRUE, damping = 1)$vector
page_rank(g5, damping = 1)$vector
page_rank(g5, damping = 0.85)$vector
page_rank(g5, damping = 0)$vector
eigen_centrality(g5, directed = TRUE, scale = FALSE)$vector
page_rank(g5, damping = 0.85)$vector
g5<-graph.formula(v1++v2, v1++v3, v1-+v4, v2-+v4, v4-+v3)
page_rank(g5, damping = 1)$vector
page_rank(g5, damping = 0.85)$vector
page_rank(g5, damping = 0)$vector
eigen_centrality(g5, directed = TRUE, scale = FALSE)$vector
?eigen_centrality
?weight
??weight
?page_rank
??page_rank
library(igraph)
setwd("/Users/fred/Github/ICS422/R-Files")
source("Utility/topnv.R")
source("Utility/topnv.R")
NS <- read.graph("Networks/netscience.graphml", format="graphml")
summary(NS)
# Existing weights
ew <- E(NS)$weight
# Negated weights
nw <- (max(ew) + 1) - ew
# Inverted weights
iw <- 1/ew
# Compare (head were too similar)
tail(ew, 10)
tail(nw, 10)
tail(iw, 10)
hist(ew, breaks=100, main="Existing Weights")
hist(nw, breaks=100, main="Negated Weights")
hist(iw, breaks=100, main="Inverted Weights")
?distances
?weight
?hist
