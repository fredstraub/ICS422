WA.cd <- component_distribution(WA)
plot(WA.mdist)
# ___your_expression_here___
WA.dt <- distance_table(WA)
plot(WA.dt)
distances(WA)
distance_table(WA)
WA.d <- distances(WA)
plot(WA.dt, WA.d)
plot(WA.dt,0:100)
distance_table(WA)
?distance_table
distance_table(WA, directed = FALSE)
distances(WA)
distances(WA, weights = NA)
plot(WA.d)
(WA2.diam  <- diameter(WA, weights = NA))
# Revised igraph computation
sort(unique((degree(WA))))
#table(degree(WA))
(WA.dd <- degree_distribution(WA))
?plot
plot(0:100,
ifelse(degree_distribution(WA)==0.0, NA, degree_distribution(WA)),
main = "WebAtlas Degree Distribution",
xlab = "k", ylab = "p(k)")
# A lin-lin plot with zero probability values removed is recommended.
# ___your_expression_here___
sort(unique((degree(WA))))
#table(degree(WA))
(WA.dd <- degree_distribution(WA))
#?plot
plot(0:100,
ifelse(degree_distribution(WA)==0.0, NA, degree_distribution(WA)),
main = "WebAtlas Degree Distribution",
xlab = "k", ylab = "p(k)")
# A lin-lin plot with zero probability values removed is recommended.
# ___your_expression_here___
#sort(unique((degree(WA))))
#table(degree(WA))
(WA.dd <- degree_distribution(WA))
#?plot
plot(0:100,
ifelse(degree_distribution(WA)==0.0, NA, degree_distribution(WA)),
main = "WebAtlas Degree Distribution",
xlab = "k", ylab = "p(k)")
# A lin-lin plot with zero probability values removed is recommended.
# ___your_expression_here___
#sort(unique((degree(WA))))
#table(degree(WA))
#(WA.dd <- degree_distribution(WA))
#?plot
plot(0:100,
ifelse(degree_distribution(WA)==0.0, NA, degree_distribution(WA)),
main = "WebAtlas Degree Distribution",
xlab = "k", ylab = "p(k)")
# A lin-lin plot with zero probability values removed is recommended.
# ___your_expression_here___
?path.length.hist
WA.dt <- distance_table(WA)
WA.d <- distances(WA, weights = NA)
distance_table(WA, directed = FALSE)
WA.cd <- component_distribution(WA)
?distance_table
plot(WA.dt)
plot(WA.d)
WA.dt <- distance_table(WA, directed = FALSE)
barplot(WA.dt$res)
?plot
WA.dt$res
hist(WA.dt$res)
hist(WA.dt$res, xlab = "Average Distances")
?distance_table
hist(WA.dt$res, xlab = "Average Distances")
hist(WA.dt$res, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution")
#WA.d <- distances(WA, weights = NA)
#distance_table(WA, directed = FALSE)
#WA.cd <- component_distribution(WA)
#?distance_table
#barplot(WA.dt$res)
#WA.dt$res
hist(WA.dt$res, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution")
WA.dt <- distance_table(WA, directed = FALSE)
hist(WA.dt$res, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution")
hist(WA.dt$res, breaks 20, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution")
hist(WA.dt$res, breaks=20, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution")
hist(WA.dt$res, breaks=100, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution")
hist(WA.dt$res, breaks=100, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution", ylim=c(0.05,3.0))
hist(WA.dt$res, breaks=100, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution", ylim=c(0.5,3.0))
hist(WA.dt$res, breaks=1000, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution", ylim=c(0.5,3.0))
hist(WA.dt$res, breaks=100, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution", ylim=c(0.5,3.0))
hist(WA.dt$res, breaks=100, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution", ylim=c(0.5,3.0), las=1)
(WA.avglocalcc  <- count_components(WA))
(WA.globalcc    <- count_components(WA, mode="strong"))
(WA.globalcc    <- count_components(WA, mode="waek"))
(WA.globalcc    <- count_components(WA, mode="weak"))
(WA.avglocalcc  <- transitivity(WA))
(WA.globalcc    <- transitivity(WA, mode="global"))
(WA.globalcc    <- transitivity(WA, type="global"))
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities for plotting degree distributions
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
WA <- read_graph("Networks/EuroSiS-WebAtlas-Simplified.graphml", format="graphml")
summary(WA)
is_simple(WA)
(WA.mdeg  <- mean(degree(WA)))
(WA.mwdeg <- mean(strength(WA)))
#sort(unique((degree(WA))))
#table(degree(WA))
#(WA.dd <- degree_distribution(WA))
#?plot
plot(0:100,
ifelse(degree_distribution(WA)==0.0, NA, degree_distribution(WA)),
main = "WebAtlas Degree Distribution",
xlab = "k", ylab = "p(k)")
# A lin-lin plot with zero probability values removed is recommended.
# ___your_expression_here___
(WA.mdist <- mean_distance(WA))
(WA.diam  <- diameter(WA))
(WA2.diam  <- diameter(WA, weights = NA))
# Revised igraph computation
WA.dt <- distance_table(WA, directed = FALSE)
hist(WA.dt$res, breaks=100, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution", ylim=c(0.5,3.0), las=1)
# ___your_expression_here___
(WA.avglocalcc  <- transitivity(WA))
(WA.globalcc    <- transitivity(WA, type="global"))
# ___your_expression_here___
# ___your_expression_here___
# ___your_expression_here___
# ___your_expression_here___
# ___your_expression_here___
(WA.avglocalcc  <- transitivity(WA))
(WA.globalcc    <- transitivity(WA, type="global"))
(WA.avglocalcc  <- transitivity(WA, type = "average"))
(WA.globalcc    <- transitivity(WA, type = "global"))
(WA.avglocalcc  <- transitivity(WA, type = "local"))
average
(WA.avglocalcc  <- transitivity(WA, type = "average"))
(WA.globalcc    <- transitivity(WA, type = "global"))
?transitivity
(WA.avglocalcc  <- transitivity(WA, type = "local"))
(WA.avglocalcc  <- transitivity(WA, type = "average"))
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities for plotting degree distributions
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
WA <- read_graph("Networks/EuroSiS-WebAtlas-Simplified.graphml", format="graphml")
summary(WA)
is_simple(WA)
(WA.mdeg  <- mean(degree(WA)))
(WA.mwdeg <- mean(strength(WA)))
#sort(unique((degree(WA))))
#table(degree(WA))
#(WA.dd <- degree_distribution(WA))
#?plot
plot(0:100,
ifelse(degree_distribution(WA)==0.0, NA, degree_distribution(WA)),
main = "WebAtlas Degree Distribution",
xlab = "k", ylab = "p(k)")
# A lin-lin plot with zero probability values removed is recommended.
# ___your_expression_here___
(WA.mdist <- mean_distance(WA))
(WA.diam  <- diameter(WA))
(WA2.diam  <- diameter(WA, weights = NA))
# Revised igraph computation
WA.dt <- distance_table(WA, directed = FALSE)
hist(WA.dt$res, breaks=100, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution", ylim=c(0.5,3.0), las=1)
# ___your_expression_here___
(WA.avglocalcc  <- transitivity(WA, type = "average"))
(WA.globalcc    <- transitivity(WA, type = "global"))
?transitivity
# ___your_expression_here___
# ___your_expression_here___
# ___your_expression_here___
# ___your_expression_here___
# ___your_expression_here___
count_components(WA)
component_distribution(WA)
WA.cd <- component_distribution(WA)
table(WA.cd)
?components
hist(WA.cd)
WA.cd <- component_distribution(WA, mul.size = TRUE)
hist(WA.cd)
WA.cd <- component_distribution(WA)
hist(WA.cd)
WA.cd <- component_distribution(WA, cumulative = TRUE)
hist(WA.cd)
WA.cd <- component_distribution(WA, cumulative = FALSE)
hist(WA.cd)
WA.cd <- component_distribution(WA, mul.size = TRUE)
hist(WA.cd)
WA.cd <- component_distribution(WA, mul.size = FALSE)
hist(WA.cd)
WA.cd <- component_distribution(WA)
hist(WA.cd)
WA.cd
hist(WA.cd)
plot(ifelse(WA.cd==0, NA, WA.cd))
plot(ifelse(WA.cd==0, NA, WA.cd), log = "xy")
plot(ifelse(WA.cd==0, NA, WA.cd))
plot(ifelse(WA.cd==0, NA, WA.cd), xlab = "Nc", ylab = "p(Nc)")
plot(0:(length(WA.cd)-1), ifelse(WA.cd==0, NA, WA.cd), main = "Component Size Probability" xlab = "Nc", ylab = "p(Nc)")
plot(0:(length(WA.cd)-1), ifelse(WA.cd==0, NA, WA.cd), main = "Component Size Probability", xlab = "Nc", ylab = "p(Nc)")
hist(WA.cd)
hist(WA.cd, main = "Component Size Probability", ylab = "Number of Sites", xlab = "Probability of being in Component", las=1)
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities for plotting degree distributions
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
WA <- read_graph("Networks/EuroSiS-WebAtlas-Simplified.graphml", format="graphml")
summary(WA)
is_simple(WA)
(WA.mdeg  <- mean(degree(WA)))
(WA.mwdeg <- mean(strength(WA)))
#sort(unique((degree(WA))))
#table(degree(WA))
#(WA.dd <- degree_distribution(WA))
#?plot
plot(0:100,
ifelse(degree_distribution(WA)==0.0, NA, degree_distribution(WA)),
main = "WebAtlas Degree Distribution",
xlab = "k", ylab = "p(k)")
# A lin-lin plot with zero probability values removed is recommended.
# ___your_expression_here___
(WA.mdist <- mean_distance(WA))
(WA.diam  <- diameter(WA))
(WA2.diam  <- diameter(WA, weights = NA))
# Revised igraph computation
WA.dt <- distance_table(WA, directed = FALSE)
hist(WA.dt$res, breaks=100, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution", ylim=c(0.5,3.0), las=1)
# ___your_expression_here___
(WA.avglocalcc  <- transitivity(WA, type = "average"))
(WA.globalcc    <- transitivity(WA, type = "global"))
?transitivity
count_components(WA)
?components
WA.cd <- component_distribution(WA)
hist(WA.cd, main = "Component Size Probability", ylab = "Number of Sites", xlab = "Probability of being in Component", las=1)
plot(0:(length(WA.cd)-1), ifelse(WA.cd==0, NA, WA.cd), main = "Component Size Probability", xlab = "Nc", ylab = "p(Nc)")
# ___your_expression_here___
# ___your_expression_here___
# ___your_expression_here___
plot(0:(length(WA.cd)-1), ifelse(WA.cd==0, NA, WA.cd), main = "Component Size Probability", xlab = "Nc", ylab = "p(Nc)", las=1)
table(components(WA.c$size)
table(WA.c$csize)
WA.c <- components(WA)
table(WA.c$csize)
names(WA.c)
WA.c$no
WA.c$membership
WA.c$membership=1
table(WA.c$membership)
table(WA.c$csize)
table(WA.c$membership)
table(WA.c$csize)
table(WA.c$csize=2)
table(WA.c$membership)
WA.c$membership
WA.c$no
V(WA)$label
V(WA)[components(WA)$membership==2]$label
V(WA)[components(WA)$membership==3]$label
V(WA)[components(WA)$membership==1]$label
V(WA)[components(WA)$membership==4]$label
count_components(WA)
WA.c <- components(WA)
table(WA.c$csize)
WA.c$no
count_components(WA)
WA.c <- components(WA)
table(WA.c$csize)
V(WA)[components(WA)$membership==4]$label
V(WA)[components(WA)$membership==5]$label
V(WA)[components(WA)$membership==6]$label
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities for plotting degree distributions
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
WA <- read_graph("Networks/EuroSiS-WebAtlas-Simplified.graphml", format="graphml")
summary(WA)
is_simple(WA)
(WA.mdeg  <- mean(degree(WA)))
(WA.mwdeg <- mean(strength(WA)))
#sort(unique((degree(WA))))
#table(degree(WA))
#(WA.dd <- degree_distribution(WA))
#?plot
plot(0:100,
ifelse(degree_distribution(WA)==0.0, NA, degree_distribution(WA)),
main = "WebAtlas Degree Distribution",
xlab = "k", ylab = "p(k)")
# A lin-lin plot with zero probability values removed is recommended.
# ___your_expression_here___
(WA.mdist <- mean_distance(WA))
(WA.diam  <- diameter(WA))
(WA2.diam  <- diameter(WA, weights = NA))
# Revised igraph computation
WA.dt <- distance_table(WA, directed = FALSE)
hist(WA.dt$res, breaks=100, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution", ylim=c(0.5,3.0), las=1)
# ___your_expression_here___
(WA.avglocalcc  <- transitivity(WA, type = "average"))
(WA.globalcc    <- transitivity(WA, type = "global"))
?transitivity
count_components(WA)
WA.c <- components(WA)
table(WA.c$csize)
V(WA)[components(WA)$membership==4]$label
V(WA)[components(WA)$membership==5]$label
V(WA)[components(WA)$membership==6]$label
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities for plotting degree distributions
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
WA <- read_graph("Networks/EuroSiS-WebAtlas-Simplified.graphml", format="graphml")
summary(WA)
is_simple(WA)
(WA.mdeg  <- mean(degree(WA)))
(WA.mwdeg <- mean(strength(WA)))
#sort(unique((degree(WA))))
#table(degree(WA))
#(WA.dd <- degree_distribution(WA))
#?plot
plot(0:100,
ifelse(degree_distribution(WA)==0.0, NA, degree_distribution(WA)),
main = "WebAtlas Degree Distribution",
xlab = "k", ylab = "p(k)")
# A lin-lin plot with zero probability values removed is recommended.
# ___your_expression_here___
(WA.mdist <- mean_distance(WA))
(WA.diam  <- diameter(WA))
(WA2.diam  <- diameter(WA, weights = NA))
# Revised igraph computation
WA.dt <- distance_table(WA, directed = FALSE)
hist(WA.dt$res, breaks=100, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution", ylim=c(0.5,3.0), las=1)
# ___your_expression_here___
(WA.avglocalcc  <- transitivity(WA, type = "average"))
(WA.globalcc    <- transitivity(WA, type = "global"))
?transitivity
count_components(WA)
WA.c <- components(WA)
table(WA.c$csize)
V(WA)[components(WA)$membership==4]$label
V(WA)[components(WA)$membership==5]$label
V(WA)[components(WA)$membership==6]$label
#sort(unique((degree(WA))))
#table(degree(WA))
#(WA.dd <- degree_distribution(WA))
#?plot
plot(0:100,
ifelse(degree_distribution(WA)==0.0, NA, degree_distribution(WA)),
main = "WebAtlas Degree Distribution",
xlab = "k", ylab = "p(k)")
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities for plotting degree distributions
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
WA <- read_graph("Networks/EuroSiS-WebAtlas-Simplified.graphml", format="graphml")
summary(WA)
is_simple(WA)
(WA.mdeg  <- mean(degree(WA)))
(WA.mwdeg <- mean(strength(WA)))
#sort(unique((degree(WA))))
#table(degree(WA))
#(WA.dd <- degree_distribution(WA))
#?plot
plot(0:100,
ifelse(degree_distribution(WA)==0.0, NA, degree_distribution(WA)),
main = "WebAtlas Degree Distribution",
xlab = "k", ylab = "p(k)")
(WA.mdist <- mean_distance(WA))
(WA.diam  <- diameter(WA))
(WA2.diam  <- diameter(WA, weights = NA))
# Revised igraph computation
WA.dt <- distance_table(WA, directed = FALSE)
hist(WA.dt$res, breaks=100, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution", ylim=c(0.5,3.0), las=1)
# ___your_expression_here___
(WA.avglocalcc  <- transitivity(WA, type = "average"))
(WA.globalcc    <- transitivity(WA, type = "global"))
?transitivity
count_components(WA)
WA.c <- components(WA)
table(WA.c$csize)
V(WA)[components(WA)$membership==4]$label
V(WA)[components(WA)$membership==5]$label
V(WA)[components(WA)$membership==6]$label
require("knitr")
opts_chunk$set(echo = TRUE)
library(igraph)
# Optional, for including images of these types
library(jpeg)
library(png)
# Utilities for plotting degree distributions
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
WA <- read_graph("Networks/EuroSiS-WebAtlas-Simplified.graphml", format="graphml")
summary(WA)
is_simple(WA)
(WA.mdeg  <- mean(degree(WA)))
(WA.mwdeg <- mean(strength(WA)))
#sort(unique((degree(WA))))
#table(degree(WA))
#(WA.dd <- degree_distribution(WA))
#?plot
plot(0:100,
ifelse(degree_distribution(WA)==0.0, NA, degree_distribution(WA)),
main = "WebAtlas Degree Distribution",
xlab = "k", ylab = "p(k)")
(WA.mdist <- mean_distance(WA))
(WA.diam  <- diameter(WA))
(WA2.diam  <- diameter(WA, weights = NA))
# Revised igraph computation
WA.dt <- distance_table(WA, directed = FALSE)
hist(WA.dt$res, breaks=100, xlab = "Average Shortest Path Distances", ylab = "Freqency of Occurance", main = "WebAtlas Shortest Path Distance Distribution", ylim=c(0.5,3.0), las=1)
# ___your_expression_here___
(WA.avglocalcc  <- transitivity(WA, type = "average"))
(WA.globalcc    <- transitivity(WA, type = "global"))
?transitivity
count_components(WA)
WA.c <- components(WA)
table(WA.c$csize)
V(WA)[components(WA)$membership==4]$label
V(WA)[components(WA)$membership==5]$label
V(WA)[components(WA)$membership==6]$label
# Read in cit-HepTh.gml
HEP <- read_graph("Networks/cit-HepTh.gml", format="gml")
setwd("/Users/frederickstraub/GitHub/ICS422/R-Files") # Set to yours
# Read in cit-HepTh.gml
HEP <- read_graph("Networks/cit-HepTh.gml", format="gml")
# Read in cit-HepTh.gml
HEP <- read_graph("Networks/cit-HepTh.gml", format="gml")
library(igraph)
setwd("/Users/frederickstraub/GitHub/ICS422/R-Files") # Set to yours
source("Utility/new_window.R")
source("Utility/degree_domain.R")
source("Utility/binned_histogram.R")
source("Utility/nonzero_degrees.R")
source("Utility/nonzero_degree_distribution.R")
# Read in cit-HepTh.gml
HEP <- read_graph("Networks/cit-HepTh.gml", format="gml")
summary(HEP)
######################################################################
# Compute degree distribution and nonzero degree domain
head(sort(unique(nonzero_degree_distribution(IR))), 3)
######################################################################
# Compute degree distribution and nonzero degree domain
degree_distribution(HEP)
head(sort(unique(nonzero_degree_distribution(HEP))), 3)
1/vcount(HEP)
######################################################################
# Compute degree distribution and nonzero degree domain
degree_distribution(HEP)
head(sort(unique(nonzero_degree_distribution(HEP))), 3)
######################################################################
# Compute degree distribution and nonzero degree domain
hea(degree_distribution(HEP))
######################################################################
# Compute degree distribution and nonzero degree domain
head(degree_distribution(HEP))
head(sort(unique(nonzero_degree_distribution(HEP))), 3)
######################################################################
# Make a linear plot with and without degree_domain to see how much
# degree_domain matters
plot(nonzero_degree_distribution(HEP),
main="Arxiv HEP-TH Nonzero Degree Dist Lin Lin",
xlab="k", ylab="p(k)")
######################################################################
# Make a linear plot with and without degree_domain to see how much
# degree_domain matters
plot(degree_distribution(HEP),
main="Arxiv HEP-TH Nonzero Degree Dist Lin Lin",
xlab="k", ylab="p(k)")
######################################################################
# Make a linear plot with and without degree_domain to see how much
# degree_domain matters
plot(degree_distribution(HEP),
main="Arxiv HEP-TH Degree Dist Lin Lin",
xlab="k", ylab="p(k)")
plot(nonzero_degree_distribution(HEP),
main="Arxiv HEP-TH Nonzero Degree Dist Lin Lin",
xlab="k", ylab="p(k)")
