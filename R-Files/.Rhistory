install.packages('swirl')
install.packages('igraph')
install.packages('tidyverse')
install.packages('poweRlaw')
install.packages('linkcomm')
install.packages('statnet')
library('igraph')
update.packages()
library(igraph)
g = Graph()
g = Graph()
g
? graph
?make_directed_graph
g <= make_directed_graph([1,2], [2,1], [1,3],[3,1],[1,4],[2,4],[4,3])
g = make_directed_graph([1,2], [2,1], [1,3],[3,1],[1,4],[2,4],[4,3])
make_directed_graph(g([1,2], [2,1], [1,3],[3,1],[1,4],[2,4],[4,3]))
g <- make_directed_graph((1,2))
make_directed_graph(g(1,2))
make_directed_graph((1,2))
directed_graph(1,2)
g <= directed_graph(1,2)
plot(dg)
dg<-graph.formula(Tom-+Mary, Tom-+Bill, Tom-+Sam, Sue+-Mary, Bill-+Sue)
dg<-graph.formula(Tom-+Mary, Tom-+Bill, Tom-+Sam, Sue+-Mary, Bill-+Sue)
plot(dg)
g<-graph.formula(v1++v2, v1++v3, v1-+v4, v2-+v4, v3-+v4)
plot(g)
g5<-graph.formula(v1++v2, v1++v3, v1-+v4, v2-+v4, v4-+v3)
plot(g5)
?page.rank
page_rank(g5, damping = 1)
page_rank(g5, damping = 1)$vector
page_rank(g5)$vector
page_rank(g5, damping = 1)$vector
page_rank(g5, damping = 0)$vector
page_rank(g5, damping = 0)$vector
page_rank(g5, damping = 0.85)$vector
page_rank(g5, damping = 0.85)$vector
page_rank(g5, damping = 0)$vector
page_rank(g5, damping = 1)$vector
page_rank(g5, damping = 0.85)$vector
page_rank(g5, damping = 0)$vector
eigen_centrality(g5)
eigen_centrality(g5)$vector
plot(g5)
g5<-graph.formula(v1++v2, v1++v3, v1-+v4, v2-+v4, v4-+v3)
page_rank(g5, damping = 1)$vector
page_rank(g5, damping = 0.85)$vector
page_rank(g5, damping = 0)$vector
eigen_centrality(g5)$vector
?eigen_centrality
eigen_centrality(g5, scale = 1)$vector
eigen_centrality(g5, scale = TRUE)$vector
eigen_centrality(g5, scale = FALSE)$vector
page_rank(g5, damping = 0)$vector
eigen_centrality(g5, scale = FALSE)$vector
eigen_centrality(g5, weights = 1)$vector
eigen_centrality(g5, scale = TRUE)$vector
eigen_centrality(g5, scale = FALSE)$vector
eigen_centrality(g5, scale = SUM TO 1)$vector
eigen_centrality(g5, scale = 1)$vector
eigen_centrality(g5, scale = 0.25)$vector
eigen_centrality(g5, scale = FALSE)$vector
g5<-graph.formula(v1++v2, v1++v3, v1-+v4, v2-+v4, v4-+v3)
page_rank(g5, damping = 1)$vector
page_rank(g5, damping = 0.85)$vector
page_rank(g5, damping = 0)$vector
eigen_centrality(g5, scale = FALSE)$vector
eigen_centrality(g5, directed = TRUE, scale = FALSE)$vector
eigen_centrality(g5, directed = TRUE, scale = TRUE)$vector
eigen_centrality(g5, directed = TRUE, scale = FALSE)$vector
page_rank(g5, directed = TRUE, damping = 1)$vector
page_rank(g5, damping = 1)$vector
page_rank(g5, damping = 0.85)$vector
page_rank(g5, damping = 0)$vector
eigen_centrality(g5, directed = TRUE, scale = FALSE)$vector
page_rank(g5, damping = 0.85)$vector
g5<-graph.formula(v1++v2, v1++v3, v1-+v4, v2-+v4, v4-+v3)
page_rank(g5, damping = 1)$vector
page_rank(g5, damping = 0.85)$vector
page_rank(g5, damping = 0)$vector
eigen_centrality(g5, directed = TRUE, scale = FALSE)$vector
library(igraph)
library(tibble)
source("Utility/new_window.R")
setwd("/Users/fred/Github/ICS422/R-Files") # Set to yours
source("Utility/new_window.R")
source("Utility/degree_domain.R")
TI <- read_graph("Networks/TI-Chats-Week-of-060401.graphml", format="graphml")
summary(TI)
# Utility function defined in the previous class
topnv <- function(graph, values, n=10) {
return(V(graph)[sort.list(values, decreasing=TRUE)[1:n]])
}
# Recompute the degree-based centralities from the previous class.
V(TI)$degree      <- degree(TI, mode="all")
V(TI)$indegree    <- degree(TI, mode="in")
V(TI)$outdegree   <- degree(TI, mode="out")
V(TI)$strength    <- strength(TI, mode="all")
V(TI)$windegree   <- strength(TI, mode="in")
V(TI)$woutdegree  <- strength(TI, mode="out")
V(TI)$und_eigen   <- eigen_centrality(TI, directed=FALSE)$vector
V(TI)$dir_eigen   <- eigen_centrality(TI, directed=TRUE)$vector
V(TI)$page_rank   <- page_rank(TI)$vector
V(TI)$authority   <- authority_score(TI)$vector
V(TI)$hub         <- hub_score(TI)$vector
?betweenness
n <- vcount(TI)
choose(n-1, 2)     # undirected normalizing denominator
((n-1) * (n-2))/2  # Version in ?betweenness documentation is equivalent
2 * choose(n-1, 2) # directed normalizing denominator
tibble (
weight = head(E(TI)$weight),
LEX    = head(E(TI)$LEX),
ADR    = head(E(TI)$ADR),
RPLY   = head(E(TI)$RPLY),
SA     = head(E(TI)$SA),
PE     = head(E(TI)$PE)
)
V(TI)$betweenness   <- betweenness(TI, weights=NA)
V(TI)$betweenness_n <- betweenness(TI, weights=NA, normalized=TRUE)
?betweenness
max(V(TI)$betweenness)     # compare to 2 * choose(n-1, 2) value above
max(V(TI)$betweenness_n)   # interpretation?
tibble(
indegree  = topnv(TI, V(TI)$indegree)$label,
page_rank = topnv(TI, page_rank(TI, weights=NA)$vector)$label,
between   = topnv(TI, V(TI)$betweenness)$label
)
hist(V(TI)$indegree, breaks=64)
hist(eigen_centrality(TI, weights=NA)$vector, breaks=64)
hist(page_rank(TI, weights=NA)$vector, breaks=64)
hist(V(TI)$betweenness, breaks=64) # only changes x axis
hist(V(TI)$betweenness_n, breaks=64) # only changes x axis
NS <- read_graph("Networks/netscience.graphml", format="graphml")
diameter(NS, weights=NA) # ignoring weights
view(tibble(
actual = topnv(NS, betweenness(NS, weights=NA))$label,
cutoff10 = topnv(NS, estimate_betweenness(NS, weights=NA, cutoff=10))$label,
cutoff9 = topnv(NS, estimate_betweenness(NS, weights=NA, cutoff=9))$label,
cutoff8 = topnv(NS, estimate_betweenness(NS, weights=NA, cutoff=8))$label,
cutoff7 = topnv(NS, estimate_betweenness(NS, weights=NA, cutoff=7))$label,
cutoff6 = topnv(NS, estimate_betweenness(NS, weights=NA, cutoff=6))$label,
cutoff5 = topnv(NS, estimate_betweenness(NS, weights=NA, cutoff=5))$label,
cutoff4 = topnv(NS, estimate_betweenness(NS, weights=NA, cutoff=4))$label,
cutoff3 = topnv(NS, estimate_betweenness(NS, weights=NA, cutoff=3))$label
))
?closeness
V(TI)$closeness <- closeness(TI, weights=NA)
V(TI)$closeness_n <- closeness(TI, weights=NA, normalized=TRUE)
max(V(TI)$closeness) # Small values because inverse of large ones
max(V(TI)$closeness_n)
hist(V(TI)$closeness, breaks=64)   # You can guess the tiny ones
hist(V(TI)$closeness_n, breaks=64) # Same histogram
tibble(
indegree = topnv(TI, V(TI)$indegree)$label,
page_rank = topnv(TI, V(TI)$page_rank)$label,
between   = topnv(TI, V(TI)$betweenness)$label,
closeness = topnv(TI, V(TI)$closeness)$label
)
library(igraph)
library(tibble)
setwd("/Users/frederickstraub/GitHub/ICS422/R-Files") # Set to yours
source("Utility/new_window.R")
source("Utility/degree_domain.R")
source("Utility/nonzero_degree_distribution.R")
TI <- read_graph("Networks/TI-Chats-Week-of-060401.graphml",
format="graphml")
summary(TI)
?degree
head(degree(TI, mode="in"))
head(degree(TI, mode="out"))
head(degree(TI, mode="in", normalized=TRUE))
V(TI)$degree    <- degree(TI, mode="all")
V(TI)$indegree  <- degree(TI, mode="in")
V(TI)$outdegree <- degree(TI, mode="out")
summary(TI)
plot(degree_domain(TI, mode="in"),
nonzero_degree_distribution(TI, mode="in"),
main="TI Chat Actors In-DD", xlab="k", ylab="p(k)")
plot(degree_domain(TI, mode="out"),
nonzero_degree_distribution(TI, mode="out"),
main="TI Chat Actors Out-DD", xlab="k", ylab="p(k)")
max(V(TI)$indegree)
max(V(TI)$outdegree)
V(TI)$label[V(TI)$indegree == max(V(TI)$indegree)]
V(TI)$label[V(TI)$outdegree == max(V(TI)$outdegree)]
?order
V(TI)[order(V(TI)$indegree, decreasing=TRUE)[1:10]]
V(TI)[order(V(TI)$indegree, decreasing=TRUE)[1:10]]$label
topnv <- function(graph, values, n=10) {
return(V(graph)[order(values, decreasing=TRUE)[1:n]])
}
topnv(TI, V(TI)$indegree)$label
topnv(TI, V(TI)$outdegree)$label
?strength
summary(TI)
V(TI)$strength  <- strength(TI, mode="all")
V(TI)$windegree <- strength(TI, mode="in")
V(TI)$woutdegree <- strength(TI, mode="out")
summary(TI)
head(V(TI)$windegree)
head(V(TI)$woutdegree)
tibble(
indegree = topnv(TI, V(TI)$indegree)$label,
windegree = topnv(TI, V(TI)$windegree)$label,
outdegree = topnv(TI, V(TI)$outdegree)$label,
woutdegree = topnv(TI, V(TI)$woutdegree)$label
)
?eigen_centrality
dec <- eigen_centrality(TI, directed=TRUE)
uec <- eigen_centrality(TI, directed=FALSE)
names(uec)
uec$value
head(uec$vector, 20)
names(uec$options)
head(uec$vector, 20)
(V(S)$eigen_directed <- eigen_centrality(S, directed=TRUE)$vector)
w <- dev.cur()
new_window("Star", 6, 6)
plot(S, vertex.size=25)
dev.set(which=w)
(V(S)$eigen_directed <- eigen_centrality(S, directed=TRUE)$vector)
?make_star
S <- make_star(10, mode="in")
w <- dev.cur()
new_window("Star", 6, 6)
plot(S, vertex.size=25)
dev.set(which=w)
(V(S)$eigen_directed <- eigen_centrality(S, directed=TRUE)$vector)
(V(S)$eigen_undirected <- eigen_centrality(S, directed=FALSE)$vector)
write_graph(S, "Star-Network-10.graphml", format="graphml")
?page_rank
V(TI)$page_rank <- page_rank(TI, directed=TRUE)$vector
max(V(TI)$page_rank) # Not 1, like Eigenvector
sum(V(TI)$page_rank) # PageRank is like a probability (of random walk)
summary(TI)
?eigen_centrality
dec <- eigen_centrality(TI, directed=TRUE)
uec <- eigen_centrality(TI, directed=FALSE)
names(uec)
V(TI)$dir_eigen_cent <- dec$vector
V(TI)$und_eigen_cent <- uec$vector
head(V(TI)$dir_eigen_cent)
head(V(TI)$und_eigen_cent)
?strength
library(igraph)
setwd("/Users/fred/Github/ICS422/R-Files") # Set to yours
source("Utility/topnv.R")
NS <- read.graph("Networks/netscience.graphml", format="graphml")
summary(NS)
TI <- read.graph("Networks/TI-Chats-Week-of-060401.graphml", format="graphml")
summary(TI)
?reciprocity
rg <- graph_from_literal(v1+-+v2, v1-+v3, v3-+v2)
plot(rg, main="Reciprocity Example", vertex.size=30)
reciprocity(rg)
reciprocity(TI)
TI.gnm <- sample_gnm(vcount(TI), ecount(TI), directed=TRUE)
reciprocity(TI.gnm)
TI.conf <- sample_degseq(degree(TI, mode="out"), degree(TI, mode="in"))
reciprocity(TI.conf)
?transitivity
tg <- graph_from_literal(1-2, 1-3, 1-4, 2-3, 4-3)
plot(tg, main="Transitivity Example", vertex.size=30)
transitivity(tg, type="global")
transitivity(tg, type="local")
sum(transitivity(tg, type="local"))/4  # take average of above ..
transitivity(tg, type="localaverage")
gw <- graph_from_literal(A-B:C:D:E, B-C:D, C-D) # RStudio incorrectly flags
E(gw)$weight <- 1
E(gw)[ V(gw)[name == "A"] %--% V(gw)[name == "E" ] ]$weight <- 5
plot(gw, vertex.size=30, edge.width=2*E(gw)$weight,
main="Weighted Transitivity Example")
transitivity(gw, vids="A", type="local") # this method ignores weights
transitivity(gw, vids="A", type="weighted")
transitivity(gw, type="local")
transitivity(gw, type="weighted")
transitivity(gw, type="weighted", isolates="zero") # if you prefer
transitivity(NS, type="global")
transitivity(sample_gnm(vcount(NS), ecount(NS)), type="global")
transitivity(NS, type="local")[1:20]
transitivity(NS, type="weighted")[1:20]
transitivity(NS, type="localaverage")
transitivity(NS, type="localaverage", isolates="zero")
V(NS)$unweighted_cc <- transitivity(NS, type="local")
V(NS)$weighted_cc <- transitivity(NS, type="weighted")
topnv(NS, page_rank(NS)$vector)$label # The major players, but ...
topnv(NS, transitivity(NS, type="local"))$label
topnv(NS, transitivity(NS, type="local"))$unweighted_cc
topnv(NS, transitivity(NS, type="weighted"))$label
topnv(NS, transitivity(NS, type="local"))$weighted_cc
tg <- graph_from_literal(1-2, 1-3, 1-4, 2-3, 4-3)
plot(tg, main="Transitivity Example", vertex.size=30)
transitivity(tg, type="global")
transitivity(tg, type="local")
