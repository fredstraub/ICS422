# I ended up using a conventional programming for-loop approach. There
# is probably an elegant R-style approach, but the tibble-based
# solution I constructed required repeating code that constructs
# membership lists, which did not seem any more elegant than a loop.
rbind(
tibble(partition = "Classname",
Classname = compare(as.numeric(as.factor(V(PSF)$classname)), as.numeric(as.factor(V(PSF)$classname)), method="nmi"),
Grade     = compare(as.numeric(as.factor(V(PSF)$classname)), as.factor(V(PSF)$grade), method="nmi"),
InfoMap   = compare(as.numeric(as.factor(V(PSF)$classname)), membership(PSF.infomap), method="nmi"),
Louvain   = compare(as.numeric(as.factor(V(PSF)$classname)), membership(PSF.louvain), method="nmi"),
),
tibble(partition = "Grade",
Classname = compare(as.factor(V(PSF)$grade), as.numeric(as.factor(V(PSF)$classname)), method="nmi"),
Grade     = compare(as.factor(V(PSF)$grade), as.factor(V(PSF)$grade), method="nmi"),
InfoMap   = compare(as.factor(V(PSF)$grade), membership(PSF.infomap), method="nmi"),
Louvain   = compare(as.factor(V(PSF)$grade), membership(PSF.louvain), method="nmi"),
),
tibble(partition = "InfoMap",
Classname = compare(membership(PSF.infomap), as.numeric(as.factor(V(PSF)$classname)), method="nmi"),
Grade     = compare(membership(PSF.infomap), as.factor(V(PSF)$grade), method="nmi"),
InfoMap   = compare(membership(PSF.infomap), membership(PSF.infomap), method="nmi"),
Louvain   = compare(membership(PSF.infomap), membership(PSF.louvain), method="nmi"),
),tibble(partition = "Louvain",
Classname = compare(membership(PSF.louvain), as.numeric(as.factor(V(PSF)$classname)), method="nmi"),
Grade     = compare(membership(PSF.louvain), as.factor(V(PSF)$grade), method="nmi"),
InfoMap   = compare(membership(PSF.louvain), membership(PSF.infomap), method="nmi"),
Louvain   = compare(membership(PSF.louvain), membership(PSF.louvain), method="nmi")
)
)
V(PSF)$louvain <- membership(PSF.louvain)
V(PSF)$infomap <- membership(PSF.infomap)
sort(unique(E(PSF)$weight))
E(PSF)$days <- E(PSF)$weight
E(PSF)$weight <- E(PSF)$duration
summary(PSF)
write_graph(PSF, "Filtered-Primary-School-Contacts.graphml", format="graphml")
include_graphics("Images/classname-partition.png", dpi=150)
# Please include a color key from Gephi here
include_graphics("Images/classname-palette.png")
include_graphics("Images/grade-partition.png", dpi=150)
# Please include a color key from Gephi here
include_graphics("Images/grade-palette.png")
include_graphics("Images/infomap-partition.png", dpi=150)
# Please include a color key from Gephi here
include_graphics("Images/infomap-palette.png")
include_graphics("Images/louvain-partition.png", dpi=150)
include_graphics("Images/louvain-palette.png")
include_graphics("Images/grade-gap.png")
include_graphics("Images/classname-gap.png")
# include_graphics("Images/cross-cluster.png")
Heroes <- read_graph("Networks/Hero-Coappearance-Network.graphml",
format="graphml")
summary(Heroes)
Heroes.louvain     <- cluster_louvain(Heroes)
Heroes.infomap     <- cluster_infomap(Heroes)
V(Heroes)$louvain  <- membership(Heroes.louvain)
V(Heroes)$infomap  <- membership(Heroes.infomap)
V(Heroes)$degree   <- degree(Heroes)
V(Heroes)$wdegree  <- strength(Heroes)
V(Heroes)$pagerank <- page_rank(Heroes)$vector
summary(Heroes)
write_graph(Heroes,"Hero-Communities.graphml", format="graphml")
# Display the top 20 crossing vertices and the number of edges via
# which they connect to others outside their partition, for both
# Louvain and Infomap. I suggest taking these steps
# Compute crossings for Louvain, sorted decreasing by crossing:
sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.louvain, Heroes)))]$label), decreasing = TRUE)[1:20]
# Compute crossings for Infomap, sorted decreasing by crossing:
sort(table(V(Heroes)[ends(Heroes, which(crossing(Heroes.infomap, Heroes)))]$label), decreasing = TRUE)[1:20]
# Display in combined tibble:
tibble(Hero_in_Louvain = head(ends(Heroes, which(crossing(Heroes.louvain, Heroes))))[1:1],
Cross_Count_L   = length(which(crossing(Heroes.louvain, Heroes))),
Hero_in_Infomap = head(ends(Heroes, which(crossing(Heroes.infomap, Heroes))))[1:1],
Cross_Count_I   = length(which(crossing(Heroes.infomap, Heroes)))
)
install.package('statnet')
install.packages("statnet")
install.packages(c("intergraph", "coda", "latticeExtra"))
install.packages(c("blob", "broom", "cli", "clipr", "cluster", "colorspace", "crayon", "DEoptimR", "desc", "dplyr", "evaluate", "fansi", "generics", "glue", "haven", "igraph", "jsonlite", "knitr", "magrittr", "MASS", "Matrix", "mgcv", "networkDynamic", "nlme", "openssl", "pillar", "pracma", "processx", "RColorBrewer", "Rcpp", "RCurl", "readr", "readxl", "rlang", "rmarkdown", "robustbase", "rprojroot", "scales", "survival", "testthat", "tidyr", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "waldo", "withr", "xfun", "yaml"))
install.packages('statnet')
install.packages('networkDynamic')
install.packages('ndtv')
install.packages('scatterplot3d')
install.packages('lubridate')
install.packages('timeordered')
install.packages(c("cli", "igraph", "MASS", "ps", "rmarkdown", "testthat"))
install.packages(c("cli", "igraph", "MASS", "ps", "rmarkdown", "testthat"))
install.packages(c("cli", "igraph", "MASS", "ps", "rmarkdown", "testthat"))
install.packages(c("cli", "igraph", "MASS", "ps", "rmarkdown", "testthat"))
install.packages(c("cli", "igraph", "MASS", "ps", "rmarkdown", "testthat"))
install.packages(c("cli", "igraph", "MASS", "ps", "rmarkdown", "testthat"))
install.packages(c("cli", "igraph", "MASS", "ps", "rmarkdown", "testthat"))
install.packages(c("cli", "igraph", "MASS", "ps", "rmarkdown", "testthat"))
install.packages(c("cli", "igraph", "MASS", "ps", "rmarkdown", "testthat"))
install.packages(c("cli", "igraph", "MASS", "ps", "rmarkdown", "testthat"))
setwd("~/Desktop/Network-Science-Demos") # Or yours
source("Utility/new_window.R")
setwd("/Users/frederickstraub/GitHub/ICS422/R-Files/Scripts") # Or yours
source("Utility/new_window.R")
HC <- read.csv("Networks/hospital_contacts.csv")
class(HC)
HC <- read.csv("Networks/hospital_contacts.csv")
setwd("/Users/frederickstraub/GitHub/ICS422/R-Files") # Or yours
source("Utility/new_window.R")
HC <- read.csv("Networks/hospital_contacts.csv")
class(HC)
names(HC)      # named fields: Time, IDs, and Status (job category)
head(HC)       # first 6 rows. Note 20 second intervals.
nrow(HC)       # how many contact events
ID_stack <- c(HC$ID1, HC$ID2)
status_stack <- c(as.character(HC$S1), as.character(HC$S2))
length(ID_stack) # twice the number of events, not number of IDs
head(ID_stack)
head(status_stack)
ID_status <- table(ID_stack, status_stack)
head(ID_status)
nrow(ID_status) # one for each ID
ID_stack <- c(HC$ID1, HC$ID2)
status_stack <- c(as.character(HC$S1), as.character(HC$S2))
length(ID_stack) # twice the number of events, not number of IDs
head(ID_stack)
head(status_stack)
ID_status <- table(ID_stack, status_stack)
head(ID_status)
head(status_stack)
head(ID_stack)
length(ID_stack) # twice the number of events, not number of IDs
head(ID_stack)
head(status_stack)
ID_status <- table(ID_stack, status_stack)
head(ID_status)
nrow(ID_status) # one for each ID
ID_status[1,]                  # get a row ..
which(ID_status[1,]!=0)        # get non-null column of that row
names(which(ID_status[1,]!=0)) # pull out the column name
names(which(ID_status[2,]!=0)) # etc.
v_status <- character(nrow(ID_status))
for(i in (1:length(v_status))){
v_status[i] <- names(which(ID_status[i,]!=0))
}
head(v_status)
table(v_status)
status_table_1 <- table(HC$S1, HC$S2)
status_table_1
?t # Transpose
status_table_2 <- status_table_1 + t(status_table_1)
status_table_2
?diag
status_table_3 <- status_table_2
diag(status_table_3)
diag(status_table_3) <- round(diag(status_table_3)/2)
diag(status_table_3)
status_table_3
temp_es <- paste(HC$S1, "-", HC$S2, sep="")
head(temp_es) # data starts with medical meetings
tail(temp_es, 7) # various interactions at end (note NUR-PAT and PAT-NUR)
e_status <- character(dim(HC)[[1]])
head(e_status) # it's an empty string for each event
e_status[temp_es=="ADM-ADM"] <- "ADM-ADM"
e_status[temp_es=="MED-MED"] <- "MED-MED"
e_status[temp_es=="NUR-NUR"] <- "NUR-NUR"
e_status[temp_es=="PAT-PAT"] <- "PAT-PAT"
e_status[(temp_es=="ADM-MED") | (temp_es=="MED-ADM")] <- "ADM-MED"
e_status[(temp_es=="ADM-NUR") | (temp_es=="NUR-ADM")] <- "ADM-NUR"
e_status[(temp_es=="ADM-PAT") | (temp_es=="PAT-ADM")] <- "ADM-PAT"
e_status[(temp_es=="MED-NUR") | (temp_es=="NUR-MED")] <- "MED-NUR"
e_status[(temp_es=="MED-PAT") | (temp_es=="PAT-MED")] <- "MED-PAT"
e_status[(temp_es=="NUR-PAT") | (temp_es=="PAT-NUR")] <- "NUR-PAT"
tail(temp_es, 7)
tail(e_status, 7)
my.HC <- data.frame(Time = HC$Time/(60*60),
ID1 = HC$ID1,
ID2 = HC$ID2,
Status = e_status)
head(my.HC)
my.HC <- data.frame(Time = HC$Time/(60*60),
ID1 = HC$ID1,
ID2 = HC$ID2,
Status = e_status)
head(my.HC)
library(lattice)
?histogram # not the same as base system hist. Read about formula x
histogram(~ Time | Status, data=my.HC, xlab="Hours", layout=c(5,2))
library(igraph)
vids <- sort(unique(c(HC$ID1, HC$ID2)))
vids
head(HC)
?Extract # to understand this
head(HC[, c("ID1", "ID2", "Time")], 10)
library(igraph)
ID_stack <- c(HC$ID1, HC$ID2)
# -------------------- Exercise (easy) --------------------
# P2: Can you get the graph to plot with finer granularity histograms
# so we can see the daily patterns in more detail?  Read the breaks
# and nint documentation in ?histogram. How many intervals do we want?
# Note: there are 97 hours in the data.
histogram(~ Time | Status, data=my.HC, xlab="Hours", layout=c(5,2),nint=97)
vids <- sort(unique(c(HC$ID1, HC$ID2)))
vids
head(HC)
?Extract # to understand this
head(HC[, c("ID1", "ID2", "Time")], 10)
?graph_from_data_frame
HC_week <- graph_from_data_frame(HC[, c("ID1", "ID2", "Time")],
vertices=data.frame(vids),
directed=FALSE)
HC_week # notice # edges and repeated edges on first row
is_simple(HC_week) # of course not
head(E(HC_week)$Time)
E(HC_week)$Time <- E(HC_week)$Time  / (60 * 60)
head(E(HC_week)$Time)
status <- unique(rbind(data.frame(id=HC$ID1, status=HC$S1),
data.frame(id=HC$ID2, status=HC$S2)))
head(status)
length(status[,1]) # check for correct length
head(status[order(status[,1]),1:2], 10) # Status pairs ordered by ID
head(status[order(status[,1]),2], 10)   # We just want the status part
V(HC_week)$Status <- status[order(status[,1]),2]
V(HC_week)$Status
summary(HC_week)
(vcount(HC_week)*(vcount(HC_week)-1)) / 2 # max |E| in simple graph
head(ends(HC_week, E(HC_week)))
head(E(HC_week)$Time)
E(HC_week)$weight <- 1
HC_week <- graph_from_data_frame(HC[, c("ID1", "ID2", "Time")],
vertices=data.frame(vids),
directed=FALSE)
HC_week # notice # edges and repeated edges on first row
is_simple(HC_week) # of course not
head(E(HC_week)$Time)
E(HC_week)$Time <- E(HC_week)$Time  / (60 * 60)
head(E(HC_week)$Time)
status <- unique(rbind(data.frame(id=HC$ID1, status=HC$S1),
data.frame(id=HC$ID2, status=HC$S2)))
head(status)
length(status[,1]) # check for correct length
head(status[order(status[,1]),1:2], 10) # Status pairs ordered by ID
head(status[order(status[,1]),2], 10)   # We just want the status part
V(HC_week)$Status <- status[order(status[,1]),2]
V(HC_week)$Status
summary(HC_week)
(vcount(HC_week)*(vcount(HC_week)-1)) / 2 # max |E| in simple graph
head(ends(HC_week, E(HC_week)))
head(E(HC_week)$Time)
E(HC_week)$weight <- 1
HC_wsimp <- simplify(HC_week) # defaults work, but see ?simplify
summary(HC_wsimp) # reduced number of edges, counted in weight
is_simple(HC_wsimp)
head(E(HC_wsimp)$weight)
summary(E(HC_wsimp)$weight)
?subgraph
HC_12h <- lapply(1:8,
function(i) {
g <- subgraph.edges(HC_week,
E(HC_week)[Time > 12 * (i - 1) &
Time <= 12 * i],
delete.vertices = FALSE)
simplify(g) # weights will be combined
})
sapply(HC_12h, vcount)
HC_12h <- lapply(1:8,
function(i) {
g <- subgraph.edges(HC_week,
E(HC_week)[Time > 12 * (i - 1) &
Time <= 12 * i],
delete.vertices = FALSE)
simplify(g) # weights will be combined
})
sapply(HC_12h, vcount)
sapply(HC_12h, ecount)
g <- subgraph.edges(HC_week,
E(HC_week)[Time > 24 * (i - 1) &
Time <= 24 * i],
delete.vertices = FALSE)
simplify(g) # weights will be combined
HC_24h <-  lapply(1:4,
function(i) {
g <- subgraph.edges(HC_week,
E(HC_week)[Time > 24 * (i - 1) &
Time <= 24 * i],
delete.vertices = FALSE)
simplify(g) # weights will be combined
})
sapply(HC_24h, vcount)
sapply(HC_24h, ecount)
status <- c("ADM", "MED", "NUR", "PAT")
colors <- c("red", "blue", "green", "black")
as.numeric(as.factor(V(HC_wsimp)$Status)) # indices into color
v_cols <- colors[as.numeric(as.factor(V(HC_wsimp)$Status))]
head(v_cols, 18)
v_cols <- colors[as.numeric(as.factor(V(HC_wsimp)$Status))]
head(v_cols, 18)
opar <- par()
par(mar=c(1.0, 1.0, 1.0, 1.0), # margins
oma=c(1.0, 1.0, 1.0, 1.0)) # outer margins
lfr = layout_with_fr(HC_wsimp)
plot(HC_wsimp, layout=lfr, vertex.size=5,
edge.width=15*(E(HC_wsimp)$weight)/1000,
vertex.color=v_cols, vertex.label=NA)
plot(HC_12h[[i]], layout=lfr, vertex.size=5,
edge.width=15*(E(HC_wsimp)$weight)/1000,
vertex.color=v_cols, vertex.label=NA)
title(paste(12*(i-1),"to",12*i,"hrs"))
for(i in (1:8)) {
plot(HC_12h[[i]], layout=lfr, vertex.size=5,
edge.width=15*(E(HC_wsimp)$weight)/1000,
vertex.color=v_cols, vertex.label=NA)
title(paste(12*(i-1),"to",12*i,"hrs"))
legend("topleft", status, col=colors, lty=1, lwd=5, bty="n", cex=0.8)
}
__________ Your visualization for loop here __________
plot(HC_12h[[i]], layout=lfr, vertex.size=5,
edge.width=8*(E(HC_wsimp)$weight)/1000,
vertex.color=v_cols, vertex.label=NA)
title(paste(24*(i-1),"to",24*i,"hrs"))
legend("topleft", status, col=colors, lty=1, lwd=5, bty="n", cex=0.8)
# -------------------- Exercise --------------------
# P6: Try making 4 plots for HC_24h from P4. Reduce edge thickness to 8*
for(i in (1:4)) {
plot(HC_12h[[i]], layout=lfr, vertex.size=5,
edge.width=8*(E(HC_wsimp)$weight)/1000,
vertex.color=v_cols, vertex.label=NA)
title(paste(24*(i-1),"to",24*i,"hrs"))
legend("topleft", status, col=colors, lty=1, lwd=5, bty="n", cex=0.8)
}
par(opar)
setwd("/Users/frederickstraub/GitHub/ICS422/R-Files/") # Or yours
source("Utility/new_window.R")
source("Utility/new_window.R")
#  You may need to run these if you have not already:
# install.packages('networkDynamic')
# install.packages('ndtv')
# install.packages('scatterplot3d')
library(network)
library(networkDynamic)
library(ndtv)
library(scatterplot3d)
HC <- read.csv("Networks/hospital_contacts.csv")
class(HC)
names(HC)      # named fields: Time, IDs, and Status (job category)
head(HC)
nrow(HC)                          # contact events
length(unique(c(HC$ID1, HC$ID2))) # actors
?networkDynamic
HC_spells <- data.frame(
onsets = (HC$Time-20)/(60*60),
termini = HC$Time/(60*60),
tail    = HC$ID1,
head    = HC$ID2
)
head(HC_spells) # Now in the required input format
?network.initialize
ug <- network.initialize(75, directed=FALSE)
HC_dn <- networkDynamic(base.net=ug, edge.spells=HC_spells)
HC_dn
?is.active
is.active(HC_dn, onset=0, terminus=1, e=1)
is.active(HC_dn, onset=1, terminus=2, e=1)
?get.edge.activity # notice other functions too
?get.edge.activity # notice other functions too
get.edge.activity(HC_dn,e=1)
get.edge.activity(HC_dn,e=10)
?get.networks
HC_dn_12h <- get.networks(HC_dn, start=0, end=96, time.increment=12)
length(HC_dn_12h)
HC_dn_12h[[1]]
HC_df <- as.data.frame(HC_dn)
names(HC_df)
head(HC_df)
summary(HC_df$duration)
summary(HC_df$duration) * 60 * 60 # Yes you can do that!
vids <- sort(unique(c(HC$ID1, HC$ID2)))
status <- unique(rbind(data.frame(id=HC$ID1, status=HC$S1),
data.frame(id=HC$ID2, status=HC$S2)))
head(status)
v_status <-  as.character(status[order(status[,1]),2])
head(v_status)
head(HC_df)
temp_es <- paste(v_status[HC_df$tail], "-",
v_status[HC_df$head], sep="")
tail(temp_es, 10)
e_colors <- numeric(nrow(HC_df)) # new vector to put edge colors in
e_colors[temp_es=="ADM-ADM"] <- 1
e_colors[temp_es=="MED-MED"] <- 2
e_colors[temp_es=="NUR-NUR"] <- 3
e_colors[temp_es=="PAT-PAT"] <- 4
e_colors[(temp_es=="ADM-MED") | (temp_es=="MED-ADM")] <- 5
e_colors[(temp_es=="ADM-NUR") | (temp_es=="NUR-ADM")] <- 6
e_colors[(temp_es=="ADM-PAT") | (temp_es=="PAT-ADM")] <- 7
e_colors[(temp_es=="MED-NUR") | (temp_es=="NUR-MED")] <- 8
e_colors[(temp_es=="MED-PAT") | (temp_es=="PAT-MED")] <- 9
e_colors[(temp_es=="NUR-PAT") | (temp_es=="PAT-NUR")] <- 10
tail(e_colors, 10)
?rainbow
(e_palette <- hcl.colors(10))                         # default
max_y <- max(HC_df$edge.id)  # max edge id is y axis limit
max_x <- max(HC_df$terminus) # max terminus is x axis limit
new_window("Hospital Contacts Edge Phase Plot", 12, 12) # make it big
new_window("Hospital Contacts Edge Phase Plot", 12, 12) # make it big
plot(c(0,max_x), c(0,max_y), ann=FALSE, type='n')
vids <- sort(unique(c(HC$ID1, HC$ID2)))
status <- unique(rbind(data.frame(id=HC$ID1, status=HC$S1),
data.frame(id=HC$ID2, status=HC$S2)))
head(status)
v_status <-  as.character(status[order(status[,1]),2])
head(v_status)
head(HC_df)
temp_es <- paste(v_status[HC_df$tail], "-",
v_status[HC_df$head], sep="")
tail(temp_es, 10)
e_colors <- numeric(nrow(HC_df)) # new vector to put edge colors in
e_colors[temp_es=="ADM-ADM"] <- 1
e_colors[temp_es=="MED-MED"] <- 2
e_colors[temp_es=="NUR-NUR"] <- 3
e_colors[temp_es=="PAT-PAT"] <- 4
e_colors[(temp_es=="ADM-MED") | (temp_es=="MED-ADM")] <- 5
e_colors[(temp_es=="ADM-NUR") | (temp_es=="NUR-ADM")] <- 6
e_colors[(temp_es=="ADM-PAT") | (temp_es=="PAT-ADM")] <- 7
e_colors[(temp_es=="MED-NUR") | (temp_es=="NUR-MED")] <- 8
e_colors[(temp_es=="MED-PAT") | (temp_es=="PAT-MED")] <- 9
e_colors[(temp_es=="NUR-PAT") | (temp_es=="PAT-NUR")] <- 10
tail(e_colors, 10)
?rainbow
(e_palette <- hcl.colors(10))                         # default
max_y <- max(HC_df$edge.id)  # max edge id is y axis limit
max_y <- max(HC_df$edge.id)  # max edge id is y axis limit
max_x <- max(HC_df$terminus) # max terminus is x axis limit
new_window("Hospital Contacts Edge Phase Plot", 12, 12) # make it big
plot(c(0,max_x), c(0,max_y), ann=FALSE, type='n')
#new_window("Hospital Contacts Edge Phase Plot", 12, 12) # make it big
plot(c(0,max_x), c(0,max_y), ann=FALSE, type='n')
new_window("Hospital Contacts Edge Phase Plot", 12, 12) # make it big
plot(c(0,max_x), c(0,max_y), ann=FALSE, type='n')
?segments
segments(HC_df$onset,    HC_df$edge.id,
HC_df$terminus, HC_df$edge.id,
col=e_palette[e_colors], lwd=4)
title(main="Dynamic Edges in Hospital Contact Network",
xlab="Time (hours)",
ylab="Interacting Pair (Ordered by First Interaction)",
cex=1.5)
?abline
abline(v=c(11,35,59,83), lty="dashed", lw=2, col="lightgray")
status.pairs <- c("ADM-ADM","MED-MED","NUR-NUR",
"PAT-PAT", "ADM-MED","ADM-NUR","ADM-PAT",
"MED-NUR", "MED-PAT","NUR-PAT")
legend("topleft", status.pairs, text.col=e_palette[(1:10)],
bg="white", bty="n", cex=1.3)
data("stergm.sim.1")
stergm.sim.1
data("stergm.sim.1")
stergm.sim.1
new_window("Florentine Marriages: Static", 12, 18)
?filmstrip
filmstrip(stergm.sim.1,displaylabels=FALSE)
?filmstrip
filmstrip(stergm.sim.1,displaylabels=FALSE)
?timePrism
?filmstrip
filmstrip(stergm.sim.1,displaylabels=FALSE)
?timePrism
compute.animation(stergm.sim.1)
attimes=c(1, 25, 50, 75, 100)
timePrism(stergm.sim.1,
at=attimes,
displaylabels=TRUE,
planes = TRUE,
label.cex=1.2)
?timeline
timeline(stergm.sim.1, cex=1.2)
?proximity.timeline
proximity.timeline(stergm.sim.1,
default.dist=6,
mode='sammon',
labels.at=17,
vertex.cex=4)
?ndtv
new_window("Florentine Marriages: Dynamic", 12, 12)
?render.animation
render.animation(stergm.sim.1,
# Found by experimentation sqrt / 2 gets a good range
vertex.cex=function(slice){sqrt(slice%v%'wealth')/2},
# Color 0 is white and 1 is black; I want others so +2
vertex.col=function(slice){slice%v%'priorates'+2}
)
#new_window("Florentine Marriages: Dynamic", 12, 12)
?render.animation
render.animation(stergm.sim.1,
# Found by experimentation sqrt / 2 gets a good range
vertex.cex=function(slice){sqrt(slice%v%'wealth')/2},
# Color 0 is white and 1 is black; I want others so +2
vertex.col=function(slice){slice%v%'priorates'+2}
)
?render.d3movie
render.d3movie(stergm.sim.1, displaylabels=TRUE,
vertex.cex=function(slice){sqrt(slice%v%'wealth')/2},
vertex.col=function(slice){slice%v%'priorates'+2})
render.d3movie(HC_dn, displaylabels=TRUE,
label=v_status,
vertex.col=as.numeric(as.factor(v_status)))
nodelist <- data.frame(ID = vids,
Label = v_status,
Job_Role = v_status # to color by this partition
)
head(nodelist)
edgelist <- data.frame(Source = HC_df$tail,
Target = HC_df$head,
start  = HC_df$onset,
end    = HC_df$terminus)
head(edgelist)
write.csv(edgelist, "HC_edgelist.csv", row.names=FALSE)
write.csv(nodelist, "HC_nodelist.csv", row.names=FALSE)
