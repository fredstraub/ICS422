# Construct a data frame with the metrics listed in the Instructions
# document. The rows should include the original graph and the three
# models. The columns should include |V|, |E|, mean geodesic distance,
# global transitivity, component count, and degree assortativity. I
# recommend the tibble approach shown in 5-4-Data-Frames.R, but you
# may use one of the other methods if you prefer. You need not display
# the intermediate steps but should display the final tibble or data
# frame of results. Remove this comment.
rnames <- c("WebAtlas", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization")
cnames <- c("Model", "V", "E", "meandist", "transitivity", "component distribution", "degreeassort")
matrix(data=0, nrow=4, ncol=6)
WA.metrics <- data.frame(rnames, matrix(data=0, nrow=4, ncol=6))
colnames(WA.metrics) <- cnames
WA.metrics
WA.metrics$V[1] <- vcount(WA)
WA.metrics$E[1] <- ecount(WA)
WA.metrics$meandist[1] <- mean_distance(WA)
WA.metrics$transitivity[1] <- transitivity(WA, type="global")
WA.metrics$components[1] <- count_components(WA)
WA.metrics$degreeassort[1] <- assortativity_degree(WA)
WA.metrics
WA.metrics$V[2] <- vcount(WA.gnm)
WA.metrics$E[2] <- ecount(WA.gnm)
WA.metrics$meandist[2] <- mean_distance(WA.gnm)
WA.metrics$transitivity[2] <- transitivity(WA.gnm, type="global")
WA.metrics$components[2] <- count_components(WA.gnm)
WA.metrics$degreeassort[2] <- assortativity_degree(WA.gnm)
WA.metrics
WA.metrics$V[3] <- vcount(WA.config)
WA.metrics$E[3] <- ecount(WA.config)
WA.metrics$meandist[3] <- mean_distance(WA.config)
WA.metrics$transitivity[3] <- transitivity(WA.config, type="global")
WA.metrics$components[3] <- count_components(WA.config)
WA.metrics$degreeassort[3] <- assortativity_degree(WA.config)
WA.metrics
WA.metrics$V[4] <- vcount(WA.rewire)
WA.metrics$E[4] <- ecount(WA.rewire)
WA.metrics$meandist[4] <- mean_distance(WA.rewire)
WA.metrics$transitivity[4] <- transitivity(WA.rewire, type="global")
WA.metrics$components[4] <- count_components(WA.rewire)
WA.metrics$degreeassort[4] <- assortativity_degree(WA.rewire)
WA.metrics
# WA.metrics <- tibble(
# )
# WA.metrics # Prints it to the report
WA.metrics <- tibble(
WA.metrics <- tibble(
)
WA.metrics <- tibble(
WA.metrics <- tibble(
Model         = c("Web Atlas", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization"),
V             = sapply(models, vcount),
E             = sapply(models, ecount),
meandist      = sapply(models, mean_distance),
components    = sapply(models, count_components),
transitivity  = sapply(models, transitivity, type="global"),
degreeassort  = sapply(models, assortativity_degree) )
# Construct a data frame with the metrics listed in the Instructions
# document. The rows should include the original graph and the three
# models. The columns should include |V|, |E|, mean geodesic distance,
# global transitivity, component count, and degree assortativity. I
# recommend the tibble approach shown in 5-4-Data-Frames.R, but you
# may use one of the other methods if you prefer. You need not display
# the intermediate steps but should display the final tibble or data
# frame of results. Remove this comment.
rnames <- c("WebAtlas", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization")
cnames <- c("Model", "V", "E", "meandist", "transitivity", "component distribution", "degreeassort")
matrix(data=0, nrow=4, ncol=6)
WA.metrics <- data.frame(rnames, matrix(data=0, nrow=4, ncol=6))
colnames(WA.metrics) <- cnames
WA.metrics
WA.metrics$V[1] <- vcount(WA)
WA.metrics$E[1] <- ecount(WA)
WA.metrics$meandist[1] <- mean_distance(WA)
WA.metrics$transitivity[1] <- transitivity(WA, type="global")
WA.metrics$components[1] <- count_components(WA)
WA.metrics$degreeassort[1] <- assortativity_degree(WA)
WA.metrics
WA.metrics$V[2] <- vcount(WA.gnm)
WA.metrics$E[2] <- ecount(WA.gnm)
WA.metrics$meandist[2] <- mean_distance(WA.gnm)
WA.metrics$transitivity[2] <- transitivity(WA.gnm, type="global")
WA.metrics$components[2] <- count_components(WA.gnm)
WA.metrics$degreeassort[2] <- assortativity_degree(WA.gnm)
WA.metrics
WA.metrics$V[3] <- vcount(WA.config)
WA.metrics$E[3] <- ecount(WA.config)
WA.metrics$meandist[3] <- mean_distance(WA.config)
WA.metrics$transitivity[3] <- transitivity(WA.config, type="global")
WA.metrics$components[3] <- count_components(WA.config)
WA.metrics$degreeassort[3] <- assortativity_degree(WA.config)
WA.metrics
WA.metrics$V[4] <- vcount(WA.rewire)
WA.metrics$E[4] <- ecount(WA.rewire)
WA.metrics$meandist[4] <- mean_distance(WA.rewire)
WA.metrics$transitivity[4] <- transitivity(WA.rewire, type="global")
WA.metrics$components[4] <- count_components(WA.rewire)
WA.metrics$degreeassort[4] <- assortativity_degree(WA.rewire)
WA.metrics
WA.metrics <- tibble(
Model         = c("Web Atlas", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization"),
V             = sapply(models, vcount),
E             = sapply(models, ecount),
meandist      = sapply(models, mean_distance),
transitivity  = sapply(models, transitivity, type="global"),
components    = sapply(models, count_components),
degreeassort  = sapply(models, assortativity_degree) )
# Construct a data frame with the metrics listed in the Instructions
# document. The rows should include the original graph and the three
# models. The columns should include |V|, |E|, mean geodesic distance,
# global transitivity, component count, and degree assortativity. I
# recommend the tibble approach shown in 5-4-Data-Frames.R, but you
# may use one of the other methods if you prefer. You need not display
# the intermediate steps but should display the final tibble or data
# frame of results. Remove this comment.
rnames <- c("WebAtlas", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization")
cnames <- c("Model", "V", "E", "meandist", "transitivity", "component distribution", "degreeassort")
matrix(data=0, nrow=4, ncol=6)
WA.metrics <- data.frame(rnames, matrix(data=0, nrow=4, ncol=6))
colnames(WA.metrics) <- cnames
WA.metrics
WA.metrics$V[1] <- vcount(WA)
WA.metrics$E[1] <- ecount(WA)
WA.metrics$meandist[1] <- mean_distance(WA)
WA.metrics$transitivity[1] <- transitivity(WA, type="global")
WA.metrics$components[1] <- count_components(WA)
WA.metrics$degreeassort[1] <- assortativity_degree(WA)
WA.metrics
WA.metrics$V[2] <- vcount(WA.gnm)
WA.metrics$E[2] <- ecount(WA.gnm)
WA.metrics$meandist[2] <- mean_distance(WA.gnm)
WA.metrics$transitivity[2] <- transitivity(WA.gnm, type="global")
WA.metrics$components[2] <- count_components(WA.gnm)
WA.metrics$degreeassort[2] <- assortativity_degree(WA.gnm)
WA.metrics
WA.metrics$V[3] <- vcount(WA.config)
WA.metrics$E[3] <- ecount(WA.config)
WA.metrics$meandist[3] <- mean_distance(WA.config)
WA.metrics$transitivity[3] <- transitivity(WA.config, type="global")
WA.metrics$components[3] <- count_components(WA.config)
WA.metrics$degreeassort[3] <- assortativity_degree(WA.config)
WA.metrics
WA.metrics$V[4] <- vcount(WA.rewire)
WA.metrics$E[4] <- ecount(WA.rewire)
WA.metrics$meandist[4] <- mean_distance(WA.rewire)
WA.metrics$transitivity[4] <- transitivity(WA.rewire, type="global")
WA.metrics$components[4] <- count_components(WA.rewire)
WA.metrics$degreeassort[4] <- assortativity_degree(WA.rewire)
WA.metrics
models <- list(WA, WA.gnm ,WA.config, NS.rewire)
# Construct a data frame with the metrics listed in the Instructions
# document. The rows should include the original graph and the three
# models. The columns should include |V|, |E|, mean geodesic distance,
# global transitivity, component count, and degree assortativity. I
# recommend the tibble approach shown in 5-4-Data-Frames.R, but you
# may use one of the other methods if you prefer. You need not display
# the intermediate steps but should display the final tibble or data
# frame of results. Remove this comment.
rnames <- c("WebAtlas", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization")
cnames <- c("Model", "V", "E", "meandist", "transitivity", "component distribution", "degreeassort")
matrix(data=0, nrow=4, ncol=6)
WA.metrics <- data.frame(rnames, matrix(data=0, nrow=4, ncol=6))
colnames(WA.metrics) <- cnames
WA.metrics
WA.metrics$V[1] <- vcount(WA)
WA.metrics$E[1] <- ecount(WA)
WA.metrics$meandist[1] <- mean_distance(WA)
WA.metrics$transitivity[1] <- transitivity(WA, type="global")
WA.metrics$components[1] <- count_components(WA)
WA.metrics$degreeassort[1] <- assortativity_degree(WA)
WA.metrics
WA.metrics$V[2] <- vcount(WA.gnm)
WA.metrics$E[2] <- ecount(WA.gnm)
WA.metrics$meandist[2] <- mean_distance(WA.gnm)
WA.metrics$transitivity[2] <- transitivity(WA.gnm, type="global")
WA.metrics$components[2] <- count_components(WA.gnm)
WA.metrics$degreeassort[2] <- assortativity_degree(WA.gnm)
WA.metrics
WA.metrics$V[3] <- vcount(WA.config)
WA.metrics$E[3] <- ecount(WA.config)
WA.metrics$meandist[3] <- mean_distance(WA.config)
WA.metrics$transitivity[3] <- transitivity(WA.config, type="global")
WA.metrics$components[3] <- count_components(WA.config)
WA.metrics$degreeassort[3] <- assortativity_degree(WA.config)
WA.metrics
WA.metrics$V[4] <- vcount(WA.rewire)
WA.metrics$E[4] <- ecount(WA.rewire)
WA.metrics$meandist[4] <- mean_distance(WA.rewire)
WA.metrics$transitivity[4] <- transitivity(WA.rewire, type="global")
WA.metrics$components[4] <- count_components(WA.rewire)
WA.metrics$degreeassort[4] <- assortativity_degree(WA.rewire)
WA.metrics
models <- list(WA, WA.gnm ,WA.config, WA.rewire)
WA.metrics <- tibble(
Model         = c("Web Atlas", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization"),
V             = sapply(models, vcount),
E             = sapply(models, ecount),
meandist      = sapply(models, mean_distance),
transitivity  = sapply(models, transitivity, type="global"),
components    = sapply(models, count_components),
degreeassort  = sapply(models, assortativity_degree) )
# WA.metrics # Prints it to the report
WA.metrics # Prints it to the report
# Construct a data frame with the metrics listed in the Instructions
# document. The rows should include the original graph and the three
# models. The columns should include |V|, |E|, mean geodesic distance,
# global transitivity, component count, and degree assortativity. I
# recommend the tibble approach shown in 5-4-Data-Frames.R, but you
# may use one of the other methods if you prefer. You need not display
# the intermediate steps but should display the final tibble or data
# frame of results. Remove this comment.
rnames <- c("WebAtlas", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization")
cnames <- c("Model", "V", "E", "meandist", "transitivity", "component distribution", "degreeassort")
matrix(data=0, nrow=4, ncol=6)
WA.metrics <- data.frame(rnames, matrix(data=0, nrow=4, ncol=6))
colnames(WA.metrics) <- cnames
WA.metrics$V[1] <- vcount(WA)
WA.metrics$E[1] <- ecount(WA)
WA.metrics$meandist[1] <- mean_distance(WA)
WA.metrics$transitivity[1] <- transitivity(WA, type="global")
WA.metrics$components[1] <- count_components(WA)
WA.metrics$degreeassort[1] <- assortativity_degree(WA)
WA.metrics$V[2] <- vcount(WA.gnm)
WA.metrics$E[2] <- ecount(WA.gnm)
WA.metrics$meandist[2] <- mean_distance(WA.gnm)
WA.metrics$transitivity[2] <- transitivity(WA.gnm, type="global")
WA.metrics$components[2] <- count_components(WA.gnm)
WA.metrics$degreeassort[2] <- assortativity_degree(WA.gnm)
WA.metrics$V[3] <- vcount(WA.config)
WA.metrics$E[3] <- ecount(WA.config)
WA.metrics$meandist[3] <- mean_distance(WA.config)
WA.metrics$transitivity[3] <- transitivity(WA.config, type="global")
WA.metrics$components[3] <- count_components(WA.config)
WA.metrics$degreeassort[3] <- assortativity_degree(WA.config)
WA.metrics$V[4] <- vcount(WA.rewire)
WA.metrics$E[4] <- ecount(WA.rewire)
WA.metrics$meandist[4] <- mean_distance(WA.rewire)
WA.metrics$transitivity[4] <- transitivity(WA.rewire, type="global")
WA.metrics$components[4] <- count_components(WA.rewire)
WA.metrics$degreeassort[4] <- assortativity_degree(WA.rewire)
models <- list(WA, WA.gnm ,WA.config, WA.rewire)
WA.metrics <- tibble(
Model         = c("Web Atlas", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization"),
V             = sapply(models, vcount),
E             = sapply(models, ecount),
meandist      = sapply(models, mean_distance),
transitivity  = sapply(models, transitivity, type="global"),
components    = sapply(models, count_components),
degreeassort  = sapply(models, assortativity_degree) )
WA.metrics # Prints it to the report
# Do the same as described in the comment above. WARNING: Mean
# Distance will take several minutes for IR, as it must compute all
# pairs shortest paths on 4 large networks. Remove this comment.
rnames <- c("Internet Routers", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization")
cnames <- c("Model", "V", "E", "meandist", "transitivity", "component distribution", "degreeassort")
matrix(data=0, nrow=4, ncol=6)
IR.metrics <- data.frame(rnames, matrix(data=0, nrow=4, ncol=6))
colnames(IR.metrics) <- cnames
IR.metrics$V[1] <- vcount(IR)
IR.metrics$E[1] <- ecount(IR)
IR.metrics$meandist[1] <- mean_distance(IR)
IR.metrics$transitivity[1] <- transitivity(IR, type="global")
IR.metrics$components[1] <- count_components(IR)
IR.metrics$degreeassort[1] <- assortativity_degree(IR)
IR.metrics$V[2] <- vcount(IR.gnm)
IR.metrics$E[2] <- ecount(IR.gnm)
IR.metrics$meandist[2] <- mean_distance(IR.gnm)
IR.metrics$transitivity[2] <- transitivity(IR.gnm, type="global")
IR.metrics$components[2] <- count_components(IR.gnm)
IR.metrics$degreeassort[2] <- assortativity_degree(IR.gnm)
IR.metrics$V[3] <- vcount(IR.config)
IR.metrics$E[3] <- ecount(IR.config)
IR.metrics$meandist[3] <- mean_distance(IR.config)
IR.metrics$transitivity[3] <- transitivity(IR.config, type="global")
IR.metrics$components[3] <- count_components(IR.config)
IR.metrics$degreeassort[3] <- assortativity_degree(IR.config)
IR.metrics$V[4] <- vcount(IR.rewire)
IR.metrics$E[4] <- ecount(IR.rewire)
IR.metrics$meandist[4] <- mean_distance(IR.rewire)
IR.metrics$transitivity[4] <- transitivity(IR.rewire, type="global")
IR.metrics$components[4] <- count_components(IR.rewire)
IR.metrics$degreeassort[4] <- assortativity_degree(IR.rewire)
models <- list(IR, IR.gnm ,IR.config, IR.rewire)
IR.metrics <- tibble(
Model         = c("Web Atlas", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization"),
V             = sapply(models, vcount),
E             = sapply(models, ecount),
meandist      = sapply(models, mean_distance),
transitivity  = sapply(models, transitivity, type="global"),
components    = sapply(models, count_components),
degreeassort  = sapply(models, assortativity_degree) )
IR.metrics # Prints it to the report
# Plot degree distributions of the natural network and of G(n,m) Use
# the degree domain adjustment and do not plot points with probability
# of 0.0. Linear axes will be OK for this one.
par(mfrow=c(2,2))
plot(degree_domain(WA),
nonzero_degree_distribution(WA),
main="Natural Network", xlab="k", ylab="P(k)")
plot(degree_domain(WA.gnm),
nonzero_degree_distribution(WA.gnm),
main="G(n,m)", xlab="k", ylab="P(k)")
# Plot degree distributions of the natural network and of G(n,m) Use
# the degree domain adjustment and do not plot points with probability
# of 0.0. Linear axes will be OK for this one.
par(mfrow=c(1,1))
plot(degree_domain(WA),
nonzero_degree_distribution(WA),
main="Natural Network", xlab="k", ylab="P(k)")
plot(degree_domain(WA.gnm),
nonzero_degree_distribution(WA.gnm),
main="G(n,m)", xlab="k", ylab="P(k)")
# Plot degree distributions of the natural network and of G(n,m) Use
# the degree domain adjustment and do not plot points with probability
# of 0.0. Logarithmic axes are better for this one.
plot(degree_domain(IR),
nonzero_degree_distribution(IR),
main="Natural Network", xlab="k", ylab="P(k)")
plot(degree_domain(IR.gnm),
nonzero_degree_distribution(IR.gnm),
main="G(n,m)", xlab="k", ylab="P(k)")
# Plot degree distributions of the natural network and of G(n,m) Use
# the degree domain adjustment and do not plot points with probability
# of 0.0. Logarithmic axes are better for this one.
plot(degree_domain(IR),
nonzero_degree_distribution(IR),
main="Natural Network", xlab="k", ylab="P(k)", log = "xy")
plot(degree_domain(IR.gnm),
nonzero_degree_distribution(IR.gnm),
main="G(n,m)", xlab="k", ylab="P(k)")
# Plot degree distributions of the natural network and of G(n,m) Use
# the degree domain adjustment and do not plot points with probability
# of 0.0. Logarithmic axes are better for this one.
plot(degree_domain(IR),
nonzero_degree_distribution(IR),
main="Natural Network", xlab="k", ylab="P(k)", log = "x")
# Plot degree distributions of the natural network and of G(n,m) Use
# the degree domain adjustment and do not plot points with probability
# of 0.0. Logarithmic axes are better for this one.
plot(degree_domain(IR),
nonzero_degree_distribution(IR),
main="Natural Network", xlab="k", ylab="P(k)", log = "y")
# Plot degree distributions of the natural network and of G(n,m) Use
# the degree domain adjustment and do not plot points with probability
# of 0.0. Logarithmic axes are better for this one.
plot(degree_domain(IR),
nonzero_degree_distribution(IR),
main="Natural Network", xlab="k", ylab="P(k)", log = "xy")
# Plot degree distributions of the natural network and of G(n,m) Use
# the degree domain adjustment and do not plot points with probability
# of 0.0. Logarithmic axes are better for this one.
plot(degree_domain(IR),
nonzero_degree_distribution(IR),
main="Natural Network", xlab="k", ylab="P(k)", log = "xy")
plot(degree_domain(IR.gnm),
nonzero_degree_distribution(IR.gnm),
main="G(n,m)", xlab="k", ylab="P(k)")
# Do the same as described in the comment above. WARNING: Mean
# Distance will take several minutes for IR, as it must compute all
# pairs shortest paths on 4 large networks. Remove this comment.
rnames <- c("Internet Routers", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization")
cnames <- c("Model", "V", "E", "meandist", "transitivity", "component distribution", "degreeassort")
IR.metrics <- data.frame(rnames, matrix(data=0, nrow=4, ncol=6))
colnames(IR.metrics) <- cnames
IR.metrics$V[1] <- vcount(IR)
IR.metrics$E[1] <- ecount(IR)
IR.metrics$meandist[1] <- mean_distance(IR)
IR.metrics$transitivity[1] <- transitivity(IR, type="global")
IR.metrics$components[1] <- count_components(IR)
IR.metrics$degreeassort[1] <- assortativity_degree(IR)
IR.metrics$V[2] <- vcount(IR.gnm)
IR.metrics$E[2] <- ecount(IR.gnm)
IR.metrics$meandist[2] <- mean_distance(IR.gnm)
IR.metrics$transitivity[2] <- transitivity(IR.gnm, type="global")
IR.metrics$components[2] <- count_components(IR.gnm)
IR.metrics$degreeassort[2] <- assortativity_degree(IR.gnm)
IR.metrics$V[3] <- vcount(IR.config)
IR.metrics$E[3] <- ecount(IR.config)
IR.metrics$meandist[3] <- mean_distance(IR.config)
IR.metrics$transitivity[3] <- transitivity(IR.config, type="global")
IR.metrics$components[3] <- count_components(IR.config)
IR.metrics$degreeassort[3] <- assortativity_degree(IR.config)
IR.metrics$V[4] <- vcount(IR.rewire)
IR.metrics$E[4] <- ecount(IR.rewire)
IR.metrics$meandist[4] <- mean_distance(IR.rewire)
IR.metrics$transitivity[4] <- transitivity(IR.rewire, type="global")
IR.metrics$components[4] <- count_components(IR.rewire)
IR.metrics$degreeassort[4] <- assortativity_degree(IR.rewire)
models <- list(IR, IR.gnm ,IR.config, IR.rewire)
IR.metrics <- tibble(
Model         = c("Web Atlas", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization"),
V             = sapply(models, vcount),
E             = sapply(models, ecount),
meandist      = sapply(models, mean_distance),
transitivity  = sapply(models, transitivity, type="global"),
components    = sapply(models, count_components),
degreeassort  = sapply(models, assortativity_degree) )
IR.metrics # Prints it to the report
# Construct a data frame with the metrics listed in the Instructions
# document. The rows should include the original graph and the three
# models. The columns should include |V|, |E|, mean geodesic distance,
# global transitivity, component count, and degree assortativity. I
# recommend the tibble approach shown in 5-4-Data-Frames.R, but you
# may use one of the other methods if you prefer. You need not display
# the intermediate steps but should display the final tibble or data
# frame of results. Remove this comment.
rnames <- c("WebAtlas", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization")
cnames <- c("Model", "V", "E", "meandist", "transitivity", "component distribution", "degreeassort")
WA.metrics <- data.frame(rnames, matrix(data=0, nrow=4, ncol=6))
colnames(WA.metrics) <- cnames
WA.metrics$V[1] <- vcount(WA)
WA.metrics$E[1] <- ecount(WA)
WA.metrics$meandist[1] <- mean_distance(WA)
WA.metrics$transitivity[1] <- transitivity(WA, type="global")
WA.metrics$components[1] <- count_components(WA)
WA.metrics$degreeassort[1] <- assortativity_degree(WA)
WA.metrics$V[2] <- vcount(WA.gnm)
WA.metrics$E[2] <- ecount(WA.gnm)
WA.metrics$meandist[2] <- mean_distance(WA.gnm)
WA.metrics$transitivity[2] <- transitivity(WA.gnm, type="global")
WA.metrics$components[2] <- count_components(WA.gnm)
WA.metrics$degreeassort[2] <- assortativity_degree(WA.gnm)
WA.metrics$V[3] <- vcount(WA.config)
WA.metrics$E[3] <- ecount(WA.config)
WA.metrics$meandist[3] <- mean_distance(WA.config)
WA.metrics$transitivity[3] <- transitivity(WA.config, type="global")
WA.metrics$components[3] <- count_components(WA.config)
WA.metrics$degreeassort[3] <- assortativity_degree(WA.config)
WA.metrics$V[4] <- vcount(WA.rewire)
WA.metrics$E[4] <- ecount(WA.rewire)
WA.metrics$meandist[4] <- mean_distance(WA.rewire)
WA.metrics$transitivity[4] <- transitivity(WA.rewire, type="global")
WA.metrics$components[4] <- count_components(WA.rewire)
WA.metrics$degreeassort[4] <- assortativity_degree(WA.rewire)
models <- list(WA, WA.gnm ,WA.config, WA.rewire)
WA.metrics <- tibble(
Model         = c("Web Atlas", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization"),
V             = sapply(models, vcount),
E             = sapply(models, ecount),
meandist      = sapply(models, mean_distance),
transitivity  = sapply(models, transitivity, type="global"),
components    = sapply(models, count_components),
degreeassort  = sapply(models, assortativity_degree) )
WA.metrics # Prints it to the report
?assortativity.degree
# Do the same as described in the comment above. WARNING: Mean
# Distance will take several minutes for IR, as it must compute all
# pairs shortest paths on 4 large networks. Remove this comment.
rnames <- c("Internet Routers", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization")
cnames <- c("Model", "V", "E", "meandist", "transitivity", "component distribution", "degreeassort")
IR.metrics <- data.frame(rnames, matrix(data=0, nrow=4, ncol=6))
colnames(IR.metrics) <- cnames
IR.metrics$V[1] <- vcount(IR)
IR.metrics$E[1] <- ecount(IR)
IR.metrics$meandist[1] <- mean_distance(IR)
IR.metrics$transitivity[1] <- transitivity(IR, type="global")
IR.metrics$components[1] <- count_components(IR)
IR.metrics$degreeassort[1] <- assortativity_degree(IR)
IR.metrics$V[2] <- vcount(IR.gnm)
IR.metrics$E[2] <- ecount(IR.gnm)
IR.metrics$meandist[2] <- mean_distance(IR.gnm)
IR.metrics$transitivity[2] <- transitivity(IR.gnm, type="global")
IR.metrics$components[2] <- count_components(IR.gnm)
IR.metrics$degreeassort[2] <- assortativity_degree(IR.gnm)
IR.metrics$V[3] <- vcount(IR.config)
IR.metrics$E[3] <- ecount(IR.config)
IR.metrics$meandist[3] <- mean_distance(IR.config)
IR.metrics$transitivity[3] <- transitivity(IR.config, type="global")
IR.metrics$components[3] <- count_components(IR.config)
IR.metrics$degreeassort[3] <- assortativity_degree(IR.config)
IR.metrics$V[4] <- vcount(IR.rewire)
IR.metrics$E[4] <- ecount(IR.rewire)
IR.metrics$meandist[4] <- mean_distance(IR.rewire)
IR.metrics$transitivity[4] <- transitivity(IR.rewire, type="global")
IR.metrics$components[4] <- count_components(IR.rewire)
IR.metrics$degreeassort[4] <- assortativity_degree(IR.rewire)
models <- list(IR, IR.gnm ,IR.config, IR.rewire)
IR.metrics <- tibble(
Model         = c("Internet Routers", "G(n,m) Random Graphs", "Configuration", "Degree Preserving Randomization"),
V             = sapply(models, vcount),
E             = sapply(models, ecount),
meandist      = sapply(models, mean_distance),
transitivity  = sapply(models, transitivity, type="global"),
components    = sapply(models, count_components),
degreeassort  = sapply(models, assortativity_degree) )
IR.metrics # Prints it to the report
?degseq
?degseq
?write.graph
# Code to write out WA.gnm, WA.config and WA.rewire
write_graph(WA.gnm, WA-Random.graphml, format=c("graphml"))
# Code to write out WA.gnm, WA.config and WA.rewire
write_graph(WA.gnm, WAgnm.graphml, format=c("graphml"))
# Code to write out WA.gnm, WA.config and WA.rewire
write_graph(WA.gnm, format=c("graphml"))
# Code to write out WA.gnm, WA.config and WA.rewire
write_graph(WA.gnm, ,"WA Random", format=c("graphml"))
# Code to write out WA.gnm, WA.config and WA.rewire
write_graph(WA.gnm,"WA Random", format=c("graphml"))
# Code to write out WA.gnm, WA.config and WA.rewire
write_graph(WA.gnm,"WA Random.graphml", format=c("graphml"))
?degseq
?write.graph
# Code to write out WA.gnm, WA.config and WA.rewire
write_graph(WA.gnm,"WA Random.graphml", format=c("graphml"))
write_graph(WA.config,"WA Config.graphml", format=c("graphml"))
write_graph(WA.rewire,"WA Rewire.graphml", format=c("graphml"))
include_graphics("Images/WA.natural.png")
include_graphics("Images/WA.random.png")
include_graphics("Images/WA.config.png")
include_graphics("Images/WA.rewire.png")
include_graphics("Images/WA.rewire.png")
