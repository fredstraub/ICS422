library(igraph)
library(igraph)
# Sep 10 2019 DS: minor changes for 2019
# Jan 28 2021 DS: Removed nonessential material for 422/622
# - Not using new_window
# Jan 27 2022 DS: Updating for spring 2022 class: formatting only.
#                 ~10 minutes
######################################################################
# *** NOTE: Good idea to restart R session after 3-1 demo
# Standard preamble
# We'll almost always do these at the beginning of every script, but
# it is not needed if you already did it in this session:
getwd()
library(igraph)
setwd("Users/frederickstraub/R-Files") # Set to your location
BPG <- read_graph("Networks/actor-movie.graphml", format="graphml")
BPG
# The type attribute must be logical and differentiates the partitions.
V(BPG)$type
V(BPG)$name
par(mfrow=c(1, 2))
plot(BPG, main = "Bipartite v1")
BPG <- read_graph("Networks/actor-movie.graphml", format="graphml")
# Sep 10 2019 DS: minor changes for 2019
# Jan 28 2021 DS: Removed nonessential material for 422/622
# - Not using new_window
# Jan 27 2022 DS: Updating for spring 2022 class: formatting only.
#                 ~10 minutes
######################################################################
# *** NOTE: Good idea to restart R session after 3-1 demo
# Standard preamble
# We'll almost always do these at the beginning of every script, but
# it is not needed if you already did it in this session:
getwd()
BPG <- read_graph("Networks/actor-movie.graphml", format="graphml")
BPG <- read_graph("Networks/actor-movie.graphml", format="graphml")
BPG <- read_graph("Networks/actor-movie.graphml", format="graphml")
setwd("/Users/frederickstraub/R-Files") # Set to your location
BPG <- read_graph("Networks/actor-movie.graphml", format="graphml")
BPG
# The type attribute must be logical and differentiates the partitions.
V(BPG)$type
V(BPG)$name
par(mfrow=c(1, 2))
plot(BPG, main = "Bipartite v1")
V(BPG)$type
ifelse(V(BPG)$type, "rectangle", "circle")
igraph_options(
vertex.shape = ifelse(V(BPG)$type, "rectangle", "circle"),
vertex.color = ifelse(V(BPG)$type, "red", "cyan"))
plot(BPG, main = "Bipartite v2")
?layout_as_bipartite
plot(BPG, main = "Bipartite v3",
layout = layout_as_bipartite(BPG))
layout_as_bipartite(BPG)
layout_as_bipartite(BPG)[,2:1] # Select from column 2 to 1: reverses
plot(BPG, main = "Bipartite v4",
layout = layout_as_bipartite(BPG)[,2:1])
-layout_as_bipartite(BPG)[,2:1]
-layout_as_bipartite(BPG)[,2:1]
plot(BPG, main = "Bipartite v4",
layout = layout_as_bipartite(BPG)[,2:1])  # old
plot(BPG, main = "Bipartite v5",
layout = -layout_as_bipartite(BPG)[,2:1]) # new
?bipartite_projection
BPG.proj <- bipartite_projection(BPG)
BPG.proj
plot(BPG.proj$proj1, main = "Projection 1",
vertex.shape = "circle",
vertex.color = "cyan")
plot(BPG.proj$proj2, main = "Projection 2",
vertex.shape = "rectangle",
vertex.color = "red")
igraph_options(vertex.shape=NULL, vertex.color=NULL)
summary(BPG.proj$proj1)
summary(BPG.proj$proj2)
BPG.proj <- bipartite_projection(BPG)
BPG.proj
summary(BPG.proj$proj1)
summary(BPG.proj$proj2)
plot(BPG.proj$proj1, main = "Projection 1",
vertex.shape = "circle",
vertex.color = "cyan")
plot(BPG.proj$proj2, main = "Projection 2",
vertex.shape = "rectangle",
vertex.color = "red")
igraph_options(vertex.shape=NULL, vertex.color=NULL)
par(mfrow=c(1, 1))
# to transform a network and using basic igraph visualization
# parameters. We learn a little R along the way.
#
# Dan Suthers, January 27, 2017
# July 24, 2018: Split this off from script 2-3
# Sep 10 2019 DS: minor changes for 2019
# Jan 28 2021 DS: minor updates for 2021 422/622
# Jan 27 2022 DS: Updating for spring 2022 class: formatting only.
#                 ~21 minutes + 3 minutes = 24 minutes
######################################################################
getwd()
library(igraph)
setwd("/Users/frederickstraub/R-Files") # Set to your location
# This example is from SAND 3.5 Visualizing Large Graphs, but has been
# upgraded for current igraph. There will be similar homework.
######################################################################
fblog <- read_graph("Networks/French-Political-Blogs.graphml",
format="graphml")
summary(fblog)
unique(V(fblog)$PolParty)
(party_name <- sort(unique(V(fblog)$PolParty)))
head(V(fblog)$PolParty, 20)             # The values to be coded
head(as.numeric(V(fblog)$PolParty), 20) # Can't code strings as numeric
head(as.factor(V(fblog)$PolParty), 20)  # Convert to factor
(party_numbers <- as.numeric(as.factor(V(fblog)$PolParty)))
plot(fblog, main = "French Political Blogs",
vertex.label = NA,
vertex.color = party_numbers,
vertex.size = 5)
summary(fblog)
unique(V(fblog)$PolParty)
(party_name <- sort(unique(V(fblog)$PolParty)))
head(V(fblog)$PolParty, 20)             # The values to be coded
head(as.numeric(V(fblog)$PolParty), 20) # Can't code strings as numeric
head(as.factor(V(fblog)$PolParty), 20)  # Convert to factor
(party_numbers <- as.numeric(as.factor(V(fblog)$PolParty)))
plot(fblog, main = "French Political Blogs",
vertex.label = NA,
vertex.color = party_numbers,
vertex.size = 5)
party <- contract(fblog, party_numbers)
summary(party)
is_simple(party)
party.lfr <- layout_with_fr(party)
plot(party, main = "Party Graph v1",
layout = party.lfr,
vertex.label = NA,
vertex.color = party_numbers,
vertex.size = 5)
summary(party)
summary(party)
E(party)$weight             # there are no weights yet
E(party)$weight <- 1        # count each link once when we simplify
?simplify                   # see attribute.combination for default
party <- simplify(party)    # combines multiedges between parties
summary(party)              # now has 25 edges and a weight attribute
is_simple(party)            # and it's simple
E(party)$weight             # now we have nontrivial weights
plot(party, main = "Party Graph v2",
layout = party.lfr,
vertex.label = NA,
vertex.color = party_numbers,
vertex.size = 5)
table(V(fblog)$PolParty)             # just to illustrate 'table'
table(V(fblog)$PolParty)             # just to illustrate 'table'
(party_size <- as.vector(table(V(fblog)$PolParty)))
plot(party, main = "Party Graph v3 with FR layout",
layout = party.lfr,                  # keep same layout as before
vertex.size = 5*sqrt(party_size),    # scale vertex size to party size
vertex.label = party_name,           # label with their names
vertex.label.cex = 0.7,              # a bit smaller
vertex.label.color="black",          # was blue
vertex.label.family=NA,              # was "serif", this turns it off
vertex.label.font=2,                 # bold
vertex.label.dist = 0.0,             # sets offset of label
vertex.color = V(party),             # each party gets its own color
edge.width = sqrt(E(party)$weight),  # line thickness shows edge weight
edge.arrow.size = 0                  # no longer directed
)
party.lkk <- layout_with_kk(party)
plot(party, main = "Party Graph v4 with KK layout",
layout = party.lkk, # I changed the layout
vertex.size = 5*sqrt(party_size),    # scale vertex size to party size
vertex.label = party_name,           # label with their names
vertex.label.cex = 0.7,              # a bit smaller
vertex.label.color="black",          # was blue
vertex.label.family=NA,              # was "serif", this turns it off
vertex.label.font=2,                 # bold
vertex.label.dist = 0.0,             # sets offset of label
vertex.color = V(party),             # each party gets its own color
edge.width = sqrt(E(party)$weight),  # line thickness shows edge weight
edge.arrow.size = 0                  # no longer directed
)
V(party)$party_name <- party_name
V(party)$party_size <- party_size
summary(party)
write_graph(party, "French-Party-Blogs.graphml", format="graphml")
fblog.lfr <- layout_with_fr(fblog)
plot(fblog, main = "French Political Blogs Ungrouped",
layout = fblog.lfr,
vertex.label = NA,
vertex.color = party_numbers,
vertex.size = 3)
V(fblog)$party_num <- party_numbers
groups <- list(V(fblog)[V(fblog)$party_num==1],
V(fblog)[V(fblog)$party_num==2],
V(fblog)[V(fblog)$party_num==3],
V(fblog)[V(fblog)$party_num==4],
V(fblog)[V(fblog)$party_num==5],
V(fblog)[V(fblog)$party_num==6],
V(fblog)[V(fblog)$party_num==7],
V(fblog)[V(fblog)$party_num==8],
V(fblog)[V(fblog)$party_num==9])
length(groups)
summary(groups)
plot(fblog, main = "French Political Blogs Grouped",
layout = fblog.lfr,
mark.groups = groups, # This is new
vertex.label = NA,
vertex.color = party_numbers,
vertex.size = 3)
